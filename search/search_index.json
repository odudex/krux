{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"faq/","title":"FAQ","text":""},{"location":"faq/#why-are-the-buttons-on-my-maix-amigo-in-the-wrong-order-why-is-my-amigo-screen-displaying-the-wrong-colors","title":"Why are the buttons on my Maix Amigo in the wrong order? Why is my Amigo screen displaying the wrong colors?","text":"<p>Some Amigo screens have inverted X coordinates while others don\u2019t. If you notice that the buttons on keypad input screens appear to be in the wrong order, please go to <code>Settings &gt; Hardware &gt; Display</code> and change the value of <code>Flipped X Coordinates</code> which should correct the issue.</p> <p>Others have found that there are issues with the colors displayed in the interface and camera preview. To fix this we have two options in <code>Settings &gt; Hardware &gt; Display</code>, <code>BGR Colors</code> and <code>Inverted Colors</code>, test with them until the colors appear to be correct on your device.</p>"},{"location":"faq/#why-doesnt-my-maix-amigo-touchscreen-work-with-v24030-if-it-worked-fine-with-v23091","title":"Why doesn't my Maix Amigo touchscreen work with v24.03.0 if it worked fine with v23.09.1?","text":"<p>We added IRQ to the firmware, so when you open your Maix Amigo, you will see a switch in the middle of the device board, it must be in the upper position for the touchscreen to work with v24.03.0 and later.</p>"},{"location":"faq/#why-isnt-my-device-charging-or-being-recognized-when-connected-to-the-computers-usb","title":"Why isn't my device charging or being recognized when connected to the computer's USB?","text":"<p>If you have a Maix Amigo, make sure you're using the USB-C port at the bottom of the device, not the one on the left side.</p> <p>Different computer hosts have varying hardware, operating systems, and behaviors regarding their USB ports. Below are the expected behaviors:</p>"},{"location":"faq/#usb-a","title":"USB-A:","text":"<p>Your device should charge and turn on when connected to a USB-A port, even if it was initially turned off. You can also turn off the device while it continues to charge. However, some hosts' USB-A ports may behave like USB-C ports, as described below.</p>"},{"location":"faq/#usb-c","title":"USB-C:","text":"<ul> <li> <p>If the device is turned off and connected to a USB-C port, it should turn on and start charging. You can turn it off again, and it will continue to charge.</p> </li> <li> <p>If the device is already turned on and connected to a USB-C port, it may not charge or be recognized by the computer. In this case, turn off the device to initiate recognition and charging. Once turned off and reconnected, the device should restart, be recognized by the computer, and charging should be triggered by USB-C hosts. If your device is not charging or being recognized as expected, try using a different USB port or a different computer to determine if the issue is with the device or the host's USB port.</p> </li> </ul>"},{"location":"faq/#why-isnt-my-m5stickv-device-being-recognized-and-charged-when-connected-to-the-computers-usb-c","title":"Why isn't my M5stickV device being recognized and charged when connected to the computer's USB-C?","text":"<p>M5stickV's USB-C port lacks pull up resistors required for it to be recognized and powered by host (computer) USB-C ports. If you don't have an USB-A available, you can use a USB hub connected between your computer's USB-C and M5stickV.</p>"},{"location":"faq/#why-does-my-krux-device-randomly-freeze-or-restart-when-connected-to-the-computer","title":"Why does my Krux device randomly freeze or restart when connected to the computer?","text":"<p>Windows is known to have issues with the USB-C devices. If you are experiencing random crashes or even reboots and your device does not have a battery, try using a phone charger or other power source such as a power bank.</p>"},{"location":"faq/#why-wont-my-linux-os-list-a-serial-port-after-connecting-my-device","title":"Why won't my Linux OS list a serial port after connecting my device?","text":"<p>If you get the following error when trying to flash your device: <code>Failed to find device via USB. Is it connected and powered on?</code> Make sure your device is being detected and serial ports are being mounted by running: <pre><code>ls /dev/ttyUSB*\n</code></pre> Expect one port to be listed for devices like M5stickV and Maix Dock <code>/dev/ttyUSB0</code>, and two ports for Maix Amigo and Maix Bit <code>/dev/ttyUSB0  /dev/ttyUSB1</code>.</p> <p>If you don't see them, your OS may not be loading the correct drivers to create the serial ports to connect to. Ubuntu has a known bug where the <code>brltty</code> driver \"kidnaps\" serial devices. You can solve this problem by removing it: <pre><code>sudo apt-get remove brltty\n</code></pre></p>"},{"location":"faq/#my-device-didnt-reboot-after-flashing-the-firmware-and-when-i-turned-it-off-and-on-again-it-just-stayed-blank-without-showing-anything-on-the-screen-what-should-i-do","title":"My device didn't reboot after flashing the firmware and when I turned it off and on again, it just stayed blank without showing anything on the screen. What should I do?","text":"<p>Check if the downloaded file matches the device, this can also occur due to data corruption. Try downloading binaries again. You can install MaixPy IDE to help with debugging, Tools &gt; Open Terminal &gt; New Terminal &gt; Connect to serial port &gt; Select a COM port available (if it doesn't work, try another COM port). It will show the terminal and some messages, a message about an empty device or with corrupted firmware appears like: \"interesting, something's wrong, boot failed with exit code 233, go to find your vendor.\"</p>"},{"location":"faq/#what-are-all-the-features-available-what-are-the-additional-features-of-the-test-beta-version-is-there-an-android-app","title":"What are all the features available? What are the additional features of the Test (Beta) version? Is there an Android app?","text":"<p>For official releases you will find all the features detailed here on the Getting Started page with a brief summary on the Navigation Overview page. The latest and most experimental features, which we sometimes share on our social media, can be found only in the test (beta) repository. Only official releases are signed, Test (Beta) is just for trying new things and providing feedback. Krux Android app is available as an <code>apk</code> on the test (beta) repository (requires Android 6.0 or above).</p>"},{"location":"faq/#why-does-krux-show-an-xpub-for-a-segwit-address","title":"Why does Krux show an xpub for a segwit address?","text":"<p>The xpub that Krux displays follows the bitcoin core descriptors spec and includes key origin and derivation info that, in theory, makes zpubs (and ypubs) unnecessary if the wallet software being shown this extra information can parse it. </p> <p>From the spec:</p> <p>Every public key can be prefixed by an 8-character hexadecimal fingerprint plus optional derivation steps (hardened and unhardened) surrounded by brackets, identifying the master and derivation path the key or xpub that follows was derived with.</p> <p>However, in practice not all wallet software supports this extended format, so Krux still provides a zpub as a fallback.</p> <p>For more information, check out https://outputdescriptors.org/.</p>"},{"location":"faq/#why-isnt-krux-scanning-my-qr-code","title":"Why isn't Krux scanning my QR code?","text":"<p>The level of detail that you see is what Krux sees. If the QR code shown on the device's screen is blurry, the camera lens of the device may be out of focus. It can be adjusted by rotating it clockwise or counter-clockwise to achieve a clearer result. The lenses usually comes with a drop of glue that makes id harder to adjust for the first time. You can use your fingertip, tweezers or small precision pliers to help, being careful to don't damage the fragile lenses.</p> <p>If you have adjusted the lens already, the device may be too far away or too close to the code to read it. Start by holding the device as close to the QR code as possible and pulling away slowly until all or most of the QR code is viewable within the screen. If the code on the screen looks crisp, Krux should read it quickly and give you immediate feedback.</p> <p>If you are in a dark environment, you can hold down the ENTER button of the M5StickV or Maix Amigo to turn on their LED light to potentially increase visibility. M5stickV and Amigo also has an anti-glare mode to better capture images from high brightness screens or with incident light, to enable/disable the anti-glare just press the PAGE button while scanning.</p>"},{"location":"faq/#why-am-i-getting-an-error-when-i-try-to-scan-a-qr-code","title":"Why am I getting an error when I try to scan a QR code?","text":"<p>If Krux is recognizing that it sees a QR code but is displaying an error message after reading it, the likely reason is that the QR code is not in a format that Krux works with. We have listed the supported formats below:</p> <p>For BIP-39 mnemonics:</p> <ol> <li>BIP-39 Plaintext (Used by Krux and https://iancoleman.io/bip39/)</li> <li>SeedSigner SeedQR and CompactSeedQR Formats</li> <li>UR Type <code>crypto-bip39</code></li> <li>Encrypted QR Code (Format created by Krux, more info here)</li> </ol> <p>For Wallet output descriptor:</p> <ol> <li>JSON with at least a <code>descriptor</code> key containing an output descriptor string</li> <li>Key-value INI files with at least <code>Format</code>, <code>Policy</code>, and <code>Derivation</code> keys</li> <li>UR Type <code>crypto-output</code></li> </ol> <p>For Partially Signed Bitcoin Transactions (PSBT):</p> <ol> <li>Base43, Base58, and Base64-encoded bytes</li> <li>Raw Bytes</li> <li>UR Type <code>crypto-psbt</code></li> </ol> <p>Additionally, Krux recognizes animated QR codes that use either the plaintext <code>pMofN</code> (Specter QR format) or binary <code>UR</code> encodings.</p>"},{"location":"faq/#why-cant-my-computer-read-the-qr-code-that-krux-displays","title":"Why can't my computer read the QR code that Krux displays?","text":"<p>If you are using an M5StickV, the small screen makes it difficult for laptop webcams to capture enough detail to parse the QR codes it displays. You can toggle brightness of QR codes from public keys and PSBTs by pressing PAGE button. In the future, more work will be done to support displaying lower density QR codes. For now, a workaround you can do is to take a picture or video of the QR code with a better-quality camera (such as your phone), then enlarge and display the photo or video to your webcam. Alternatively, it may be simpler to use a mobile wallet such as BlueWallet with the M5StickV since phone cameras don't seem to have issues reading the small QR codes. You can also save the PSBT on a microSD card for Krux to sign and then save the signed transaction to the microSD card to transfer the file to the computer or phone.</p>"},{"location":"faq/#why-isnt-krux-detecting-my-microsd-card-or-presenting-an-error","title":"Why isn't Krux detecting my microSD card or presenting an error?","text":"<p>Starting from version 23.09.0, Krux supports SD card hot plugging. If you are using older versions, it may only detect the SD card at boot, so make sure Krux is turned off when inserting the microSD into it. To test the card compatibility use Krux Tools&gt;Check SD Card. Make sure the SD card is using MBR/DOS partition table and FAT32 format.</p> <p>Here is some supported microSD cards, and here is the MaixPy FAQ explaining Why my micro SD card cannot be read.</p>"},{"location":"faq/#why-insert-an-sd-card-into-my-device-what-is-it-for-does-it-save-something","title":"Why insert an SD card into my device? What is it for? Does it save something?","text":"<p>SD card use is optional, most people use Krux only with QR codes. But you can use SD card to to upgrade the firmware, save settings, cnc/file, QR codes, XPUBs, encrypted mnemonics, and to save and load PSBTs, messages and wallet output descriptors.</p>"},{"location":"","title":"Krux","text":"<p>Krux is an open-source firmware that transforms off-the-shelf Kendryte K210 devices, such as the Maix Amigo, M5StickV and more, into versatile Bitcoin transaction signers. Beyond its core functionality, Krux is a flexible platform that can adapt to devices with different form factors, providing a suite of tools to assist with the creation and recovery of mnemonic backups, some of which include encryption options for enhanced security.</p> <p>Devices like Maix Amigo comes ready to use, with large touchscreens that make it easy and user-friendly to operate. These devices are ideal for those looking for a plug-and-play solution. On the other hand, Krux also supports development board kits, which are perfect for DIY enthusiasts who enjoy customizing and building their own hardware setups.</p> <p>Interacting seamlessly with leading coordinator wallets through QR codes, SD cards, and even thermal printers, the firmware is continuously evolving to become a Swiss Army knife for self-custody, offering an array of features to support transactions and backups in a user-friendly and airgapped environment.</p> <p>To learn more about Krux, check out Getting Started.</p>"},{"location":"parts/","title":"Devices and Part List","text":""},{"location":"parts/#krux-compatible-devices","title":"Krux Compatible Devices","text":""},{"location":"parts/#comparative-table","title":"Comparative Table","text":"Device M5stickV Maix Amigo Maix Dock Maix Bit Yahboom k210 module Price avg. US$50 US$55 US$35 US$35 US$60 Screen size / resolution 1.14\" / 135*240 3.5\" / 320*480 2.4\" / 240*320 2.4\" / 240*320 2\" / 240*320 Touchscreen Capacitive Capacitive Camera OV7740 OV7740 rearGC0328 front GC0328 OV2640 orOV5642 OV2640  Battery 200mAh 520mAh Requirements None None Rotary encoder 3D printed case SolderingAssembly Buttons 3D printed case SolderingAssembly None Warnings Camera has lens distortion Micro USB <p>: M5stickV's USB-C port lacks pull up resistors required for it to be recognized and powered by host (computer) USB-C ports. If you don't have an USB-A available, you can use a USB hub connected between your computer's USB-C and M5stickV. </p> <p>: Some Amigo screens have inverted X coordinates, others display colors differently. For more info see FAQ </p> <p>: Some stores ship the Maix Dock with soldered pin connectors that do not fit into the 3D printed case </p> <p>All devices feature Kendryte K210 chip: 28nm process, dual-core RISC-V 64bit @400MHz, 8 MB high-speed SRAM, DVP camera and MCU LCD interface, AES Accelerator, SHA256 Accelerator, FFT Accelerator. </p>"},{"location":"parts/#m5stickv","title":"M5StickV","text":"<p>Available from many distributors, including:</p> <ul> <li>M5Stack</li> <li>Adafruit</li> <li>Mouser</li> <li>Digi-Key</li> <li>Lee's Electronic</li> <li>Cytron</li> <li>OKDO</li> </ul>"},{"location":"parts/#maix-amigo","title":"Maix Amigo","text":"<p>Available from many distributors, including:</p> <ul> <li>Seeed Studio</li> <li>Mouser</li> <li>Electromaker</li> <li>Digi-Key</li> <li>AliExpress</li> <li>Amazon</li> </ul>"},{"location":"parts/#maix-dock-and-maix-bit","title":"Maix Dock and Maix Bit","text":"<p>For the DIYers, the Maix Dock and Maix Bit are also supported but will require sourcing the parts individually and building the device yourself.</p> <p>Below are example implementations with instructions on how to recreate them:</p> <ul> <li>https://github.com/selfcustody/DockEncoderCase</li> <li>https://github.com/selfcustody/MaixBitCase</li> </ul>"},{"location":"parts/#other-parts","title":"Other Parts","text":""},{"location":"parts/#usb-c-charge-cable","title":"USB-C Charge Cable","text":"<p>This will be included with the M5StickV and Maix Amigo that you purchase from one of the distributors above. It will be necessary to power and charge the device and to initially flash the firmware.</p>"},{"location":"parts/#optional-microsd-card","title":"(Optional) MicroSD Card","text":"<p>We cannot guarantee that a microSD card is compatible and will work in your device; you'll need to test it on the device to be sure, read the FAQ for more info. The size of the SD card isn't important; anything over a few megabytes will be plenty.</p>"},{"location":"parts/#optional-thermal-printer","title":"(Optional) Thermal Printer","text":"<p>Krux has the capability to print all QR codes it generates, including those for mnemonics, xpubs, wallet backups, and signed PSBTs, using a locally-connected thermal printer via its serial port.</p> <p>Many thermal printers may be compatible, but currently, the Goojprt QR203 (easily found on AliExpress) has the best support. The Adafruit printer starter pack can also be a convenient option to get started, as it includes all the necessary components for printing (except the conversion cable). To ensure proper functionality, enable the printer driver in the Krux settings, set the Tx pin and baud rate value to either 19200 or 9600, as explained in this Adafruit printer tutorial. You will need to connect the device's Tx to the printer's Rx and ground. The printer requires a dedicated power supply, typically with an output of 5 to 9V and capable of supplying at least 2A. For more information, see this discussion.</p>"},{"location":"parts/#optional-conversion-cable-for-thermal-printer","title":"(Optional) Conversion Cable for Thermal Printer","text":"<p>To connect the printer to the device, you will need a conversion cablewith a 4-pin female Grove connector on one end (to connect to the device) and 4-pin male jumpers on the other end (to connect to the printer). For a more reliable connection, it is recommended to cut and solder the wires of your custom cables instead of using jumpers.</p>"},{"location":"support/","title":"Support the Project","text":""},{"location":"support/#ways-you-can-help","title":"Ways you can help","text":""},{"location":"support/#development","title":"Development","text":"<p>Audit the code, file an issue, make a pull request, or do all three. :)</p>"},{"location":"support/#documentation","title":"Documentation","text":"<p>I'd like to see Krux help as many people as possible, and to do that, good documentation is needed. If you identify a better way to say something, please make a PR, any help is appreciated.</p>"},{"location":"support/#translation","title":"Translation","text":"<p>Krux supports different languages. If you missed a language or saw a awkward translation, open an issue or make a PR! You can also make a difference by translating this documentation!</p>"},{"location":"support/#social","title":"Social","text":"<p>Reach out our Telegram group or X profile for faster help, share ideas and join the Krux community. Help others get to know Krux.</p> <p>\"I'm an engineer, not a marketer. If you like Krux, help spread the word!\" - Jeff</p>"},{"location":"support/#donations","title":"Donations","text":"<p>Krux won't ask for, receive, manage or distribute donations. You can donate directly to a Krux contributor of your choice.</p> <p>Thank you!</p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>Krux is open-source Bitcoin signing firmware for devices with the K210 chipset.</p> <p>Signing operations in Krux are done offline via QR code or via SD card. You can create/load your BIP-39 mnemonic, or import a wallet output descriptor, and sign transactions all without having to plug the device into your computer (except to initially install the firmware). It reads QR codes with its camera and outputs QR codes to its screen, or to paper via an optional thermal printer attachment. </p> <p>Krux does not come with its own desktop wallet software. Instead, you can use Krux with third-party wallet coordinators to create/manage wallets, and send transactions from your online computer or mobile device while keeping your keys offline. Krux was built to be vendor agnostic and works with many popular wallet coordinators, including:</p> <ul> <li>Sparrow Wallet</li> <li>Nunchuk</li> <li>Specter Desktop</li> <li>BlueWallet</li> </ul>"},{"location":"getting-started/navigation/","title":"Navigation Overview","text":"<p>Below is the mind map representation of the currently menus available. Click the circle with a number (Ex.: ) to the right of each node to expand and explore. Also, enable full screen in the top right menu for better viewing .</p>"},{"location":"getting-started/navigation/#login-menu","title":"Login Menu","text":""},{"location":"getting-started/navigation/#home-menu-loaded-a-mnemonic","title":"Home Menu (Loaded a mnemonic)","text":""},{"location":"getting-started/settings/","title":"Settings","text":"<p>In the Krux home menu, there is a <code>Settings</code> entry. Below is a breakdown of the options you can change:</p> <p> </p>"},{"location":"getting-started/settings/#bitcoin-network","title":"Bitcoin - Network","text":"<p>This option allows you to switch between <code>mainnet</code> (the default) and <code>testnet</code>. <code>Testnet</code> can be used to try out different wallet coordinators or for development. </p>"},{"location":"getting-started/settings/#encryption","title":"Encryption","text":"<p>Modify the encryption method and parameters to fit your needs. This will be used when storing encrypted mnemonics or creating encrypted QR codes. For more info see Krux Encrypted Mnemonics.</p>"},{"location":"getting-started/settings/#pbkdf2-iter-iterations","title":"PBKDF2 Iter. (Iterations)","text":"<p>When you enter the encryption key, it is not directly used to encrypt your data. In order to protect against brute force attacks, the key is derived multiple times using hashing functions. PBKDF2 (Password-Based Key Derivation Function) iterations stands for the amount of derivations that will be performed over your key prior to encrypt/decrypt your mnemonic.</p> <p>If you increase this value it will make the encryption harder, at the cost of taking longer to encrypt/decrypt your mnemonics.</p> <p>Values must be multiple of 10,000. This was done to save data space on QR codes.</p>"},{"location":"getting-started/settings/#encryption-mode","title":"Encryption Mode","text":"<p>Choose between well known and widely used AES (Advanced Encryption Standard) modes:</p>"},{"location":"getting-started/settings/#aes-ecb","title":"AES-ECB","text":"<p>ECB (Electronic Codebook), its a simpler method where encryption data blocks are encrypted individually. It will be faster and simpler to encrypt, QR codes will have a lower density and will be easier to transcribe.</p>"},{"location":"getting-started/settings/#aes-cbc","title":"AES-CBC","text":"<p>CBC (Cipher-block Chaining) is considered more secure as in the first data block an initialization vector (IV) is used to add random data to the encryption. The encryption of subsequent blocks depends on the data from previous blocks, ensuring chaining.</p> <p>Encryption will take longer because a snapshot will be needed to generate the IV. This IV will be stored together with encrypted data, making encrypted QR codes denser and harder to transcribe.</p>"},{"location":"getting-started/settings/#hardware","title":"Hardware","text":"<p>Customize the parameters available for your device and change printer settings.</p>"},{"location":"getting-started/settings/#encoder-maix-dock-only","title":"Encoder (Maix Dock only)","text":"<p>If your device has a rotary encoder, you can change the debounce threshold in milliseconds. With lower values, faster movements and navigation will be allowed.</p> <p>The caveat is low values can cause issues, such as double step and unexpected movements, especially with lower quality encoders. If this is the case increase the value to make navigation more stable.</p>"},{"location":"getting-started/settings/#display-maix-amigo-only","title":"Display (Maix Amigo only)","text":"<p>Some Maix Amigo screens are different, here you can customize the BGR Colors, Flipped X Coordinates and Inverted Colors. For more info see FAQ</p>"},{"location":"getting-started/settings/#printer","title":"Printer","text":"<p>You can set up a thermal printer or tell Krux to store a GRBL CNC instructions file on a SD card to machine QR codes</p>"},{"location":"getting-started/settings/#cnc","title":"CNC","text":"<p>Define several machining parameters according to the desired size, material you'll use, and your CNC characteristics and capabilities.</p>"},{"location":"getting-started/settings/#thermal","title":"Thermal","text":"<p>Printers can come with different baudrates from the manufacturer. By default, Krux assumes the connected printer will have a baudrate of <code>9600</code>. If yours is different, you can change it here.</p> <p>Also setup the TX Pin you'll use (e.g. 35 for M5stickV and 7 for Maix Amigo) and tweak other parameters according to your printer recommendations. For most printers you will only need to connect 2 cables, the device TX to the printer RX and ground. Consult the part list page for supported printers.</p>"},{"location":"getting-started/settings/#driver","title":"Driver","text":"<p>Here you choose between Thermal, CNC or none (default). Leave this setting to \"none\" if you won't use a printer and don't want to be bothered by print prompts.</p>"},{"location":"getting-started/settings/#touchscreen-maix-amigo-and-yahboom-only","title":"Touchscreen (Maix Amigo and Yahboom only)","text":"<p>If your device has touchscreen you can change the touch detection threshold. If it is being too sensitive or detecting false (ghost) touches, you should increase the threshold value, making it less sensitive. The other way is also valid, reduce the threshold to make the screen more sensitive to touches.</p>"},{"location":"getting-started/settings/#language-locale","title":"Language - Locale","text":"<p>Here you can change Krux to your desired language.</p>"},{"location":"getting-started/settings/#persist","title":"Persist","text":"<p>Choose between flash (device's internal memory) or SD card for the place where your settings will be stored.</p>"},{"location":"getting-started/settings/#appearance","title":"Appearance","text":"<p>Configure screensaver time and change Krux to your desired theme.</p>"},{"location":"getting-started/settings/#screensaver-time","title":"Screensaver time","text":"<p>Set how long to wait idle before the screensaver appears. Enter 0 to disable the screensaver.</p>"},{"location":"getting-started/settings/#theme","title":"Theme","text":"<p>Choose your color theme according to your preference. Some themes may be more suitable for some devices, coordinator cameras and environments. As an example, it may be easier to scan QR codes from Krux devices using light theme in brighter environments.</p> <p> </p> <p> </p>"},{"location":"getting-started/settings/#factory-settings","title":"Factory Settings","text":"<p>Restore device to factory settings and reboot.</p>"},{"location":"getting-started/features/QR-transcript-tools/","title":"Transcribing QR Codes","text":"<p>When you export a mnemonic, encrypted mnemonic or a generic text QR code, alternative visualization modes will be available. To change modes swipe sideways, or press <code>Page</code> buttons if the device doesn't have touchscreen. Find transcribe templates here.</p>"},{"location":"getting-started/features/QR-transcript-tools/#standard-mode","title":"Standard Mode","text":"<p>This mode is optimized for scanning, the raw QR code will be displayed</p>"},{"location":"getting-started/features/QR-transcript-tools/#lines-mode","title":"Lines Mode","text":"<p>If you are good at transcribing things like handwritten text, with this mode one QR code line will be highlighted at a time. Press <code>Enter</code> to highlight the next line.</p>"},{"location":"getting-started/features/QR-transcript-tools/#zoomed-regions-mode","title":"Zoomed Regions Mode","text":"<p>QR codes will be split into regions, of 5x5 or 7x7 \"blocks\". One QR code region will be shown at a time. Press <code>Enter</code> to display the next region.</p>"},{"location":"getting-started/features/QR-transcript-tools/#highlighted-regions-mode","title":"Highlighted Regions Mode","text":"<p>QR codes will be split into regions, of 5x5 or 7x7 \"blocks\". One QR code region will be highlighted at a time. Press <code>Enter</code> to highlight the next region.</p>"},{"location":"getting-started/features/QR-transcript-tools/#grided-mode","title":"Grided Mode","text":"<p>Grids will be added to a standard QR code. In a dark room, if you place a sheet of paper over the device's screen, you'll notice QR code will be visible and it will be possible to copy it directly from above. Be careful to don't damage your screen with pen and markers, use an insulating plastic tape or film to protect the device if you use this method.</p>"},{"location":"getting-started/features/encrypted-mnemonics/","title":"Encrypted Mnemonics","text":""},{"location":"getting-started/features/encrypted-mnemonics/#introduction","title":"Introduction","text":"<p>There are many possible security layers one could add to protect a wallet\u2019s private key. Adding a BIP-39 passphrase to the mnemonic is the most common method. Encrypting a BIP-39 mnemonic has a similar use case as the BIP-39 passphrase, but the user experience may differ depending on the implementation. The main difference between BIP-39 passphrases and Krux\u2019s encrypted mnemonic implementation is that when users type the wrong key, encrypted mnemonics will return an error instead of loading a different wallet, as BIP-39 passphrases do. This difference may be desired or not. The implementation also has the convenience of storing a mnemonic ID together with the stored or QR code encrypted mnemonics. Mnemonic encryption, with its own key, can be used together with BIP-39 passphrase as an extra security layer.</p> <p>We use standard AES encryption modes ECB and CBC:</p>"},{"location":"getting-started/features/encrypted-mnemonics/#aes-ecb","title":"AES-ECB","text":"<p>ECB (Electronic Codebook) is a simpler method where encryption data blocks are encrypted individually. This mode is faster and simpler to encrypt, resulting in QR codes with lower density and easier to transcribe. It is generally considered less secure than CBC because it does not provide data chaining, meaning identical plaintext blocks will produce identical ciphertext blocks, making it vulnerable to pattern analysis. However, in Krux's implementation, only one or two binary data blocks are encrypted, so there will be no patterns, and the lack of chaining is not as relevant as it would be for larger files, plain text, or media.</p>"},{"location":"getting-started/features/encrypted-mnemonics/#aes-cbc","title":"AES-CBC","text":"<p>CBC (Cipher-block Chaining) is considered more secure. In the first data block, an initialization vector (IV) is used to add random data to the encryption. The encryption of subsequent blocks depends on the data from previous blocks, characterizing chaining. The tradeoff is that the encryption process will take longer because a snapshot will be needed to generate the IV. This IV will be stored together with encrypted data, making encrypted QR codes denser and harder to transcribe.</p>"},{"location":"getting-started/features/encrypted-mnemonics/#cbc-encryption-iv","title":"CBC Encryption IV","text":"<p>The Initial Vector (IV) will be generated from a snapshot taken with the camera. The IV is a fixed-size input value used in the first block of the encryption process. It adds randomness to the encryption, ensuring that data encrypted with the same key will produce different ciphertexts each time. The IV is not secret and will be transmitted along with the ciphertext. However, like any nonce, it should not be reused to maintain security.</p>"},{"location":"getting-started/features/encrypted-mnemonics/#pbkdf2-iterations","title":"PBKDF2 Iterations","text":"<p>When you enter the encryption key, it is not directly used to encrypt your data. In order to protect against brute force attacks, the key is derived multiple times using hashing functions. PBKDF2 (Password-Based Key Derivation Function) iterations refer to the number of derivations that will be performed over your key prior to encrypting/decrypting your mnemonic.</p>"},{"location":"getting-started/features/encrypted-mnemonics/#encrypted-qr-codes-data-and-parsing","title":"Encrypted QR Codes Data and Parsing","text":"<p>In search of efficiency and smaller QR codes, all data is converted to bytes and organized like a Bitcoin transaction, with variable and fixed length fields. The following data is present on the QR code:</p> ID length (1) ID (2) Version (3) Key Derivations (4) IV (5) Encrypted Mnemonic (6) Validation Block (7) 1 Byte Variable 1 Byte 3 Bytes 16 Bytes (optional) 16 Bytes (12 words) 32 Bytes (24 words) 16 Bytes <ul> <li>Visible data (1 to 4):<ul> <li>(1) Mnemonic ID length (1 Byte).</li> <li>(2) Mnemonic ID (variable lenght): Custom ID or wallet fingerprint.</li> <li>(3) Version (1 Byte): Version of encryption method, currently two are available:<ul> <li>0: AES-ECB-PBKDF2: Electronic Codebook with PBKDF2 key derivation.</li> <li>1: AES-CBC-PBKDF2: Cypher Block Chaining with PBKDF2 key derivation.</li> </ul> </li> <li>(4) Key derivation iterations (3 Bytes): Number of PBKDF2 key derivations times 10,000.</li> </ul> </li> <li>Cipher data (5 to 7):<ul> <li>(5) IV (16 Bytes-optional): Initial vector for AES-CBC encryption, possibility to be nonce for future     AES-CTR or other encryption methods.</li> <li>(6) Encrypted Mnemonic (16 Bytes - 12 words, 32 Bytes - 24 words): Mnemonic ciphertext.</li> <li>(7) Validation block (16 Bytes): Currently using first 16 bytes of sha256 of the mnemonic bytes as checksum, could be used in future to store AES-AEX validation tag.</li> </ul> </li> </ul>"},{"location":"getting-started/features/encrypted-mnemonics/#considerations","title":"Considerations","text":"<p>Storage of encrypted mnemonics on the device or SD cards are meant for convenience only and should not be considered a form of backup. Always make a physical backup of your keys that is independent from electronic devices and test recovering your wallet from this backup before you send funds to it.</p> <p>Remember that the stored encrypted mnemonic is protected by the key you defined to encrypt it. If the defined key is weak, your encrypted mnemonic will not be protected. If you have stored a mnemonic with funds in the device's internal flash memory using a weak key, the best way to undo this is to wipe the device.</p>"},{"location":"getting-started/features/printing/","title":"Printing","text":"<p>Krux has the ability to print all QR codes it generates, including mnemonic, xpub, wallet backup, and signed PSBT, via a locally-connected thermal printer over its serial port. Consult the part list page for supported printers.</p> <p> </p> <p> </p> <p>Once connected and powered on, all screens that display a QR code will begin showing a follow-up screen asking if you want to <code>Print to QR?</code>.</p> <p>There are many ways you can use this functionality, including:</p> <ul> <li>Printing backups of your mnemonics and multisig wallets</li> <li>Printing your xpubs and receive addresses to share</li> <li>Printing signed messages and PSBTs</li> </ul> <p>Since printed thermal paper fades quickly, you can also print your backups on sticker thermal paper to use as templates for punching into more resilient materials like steel.</p> <p>We also have plans to add support for other kinds of QR \"printers\" in the future, including CNC machines. In this case, gcode will be generated that can be sent directly to a GRBL controller to cut your QRs out of wood or metal!</p> <p>Just be careful what you do with the printed codes, since most smartphones can now quickly and easily read QR codes. Treat your QR mnemonic the same way you would treat a plaintext copy of it.</p>"},{"location":"getting-started/features/sd-card-update/","title":"SD Card Updates","text":""},{"location":"getting-started/features/sd-card-update/#upgrade-via-microsd-card","title":"Upgrade via microSD card","text":"<p>Once you've installed the initial firmware on your device via USB, you can either continue updating the device by flashing via USB or you can perform upgrades via microSD card to keep the device airgapped.</p> <p>To perform an upgrade, simply copy the official release <code>firmware.bin</code> and <code>firmware.bin.sig</code> files to the root of a FAT-32 (MBR) formatted microSD card, insert the card into your device, and reboot the device. If it detects the new firmware file and is able to verify the signature, you will be prompted to install it.</p> <p>Once installation is complete, eject the microSD card and delete the firmware files before reinserting and rebooting. Otherwise you will be prompted to install it again.</p> <p>We cannot guarantee that a microSD card is compatible and will work in your device; you'll need to test it on the device to be sure, read the FAQ for more info. Only official releases are signed and can be installed via microSD card.</p>"},{"location":"getting-started/features/tools/","title":"Tools","text":"<p>Here are some useful tools that are available as soon as Krux starts! These are offered as a complement to managing your device and wallets.</p> <p> </p>"},{"location":"getting-started/features/tools/#check-sd-card","title":"Check SD Card","text":"<p>You can check if a SD card can be detected and read by your device and explore its content.</p>"},{"location":"getting-started/features/tools/#print-test-qr","title":"Print Test QR","text":"<p>Quickly print a test QR code to check and optimize your printer setup.</p>"},{"location":"getting-started/features/tools/#create-qr-code","title":"Create QR Code","text":"<p>Enter a text input to create, print or transcript a QR code that can be later used as an encryption key or as a passphrase.</p>"},{"location":"getting-started/features/tools/#remove-mnemonic","title":"Remove Mnemonic","text":"<p>This option allows you to remove any stored encrypted mnemonic from the device's internal memory or an SD card. For more information, see Krux Encrypted Mnemonics.</p> <p>When mnemonics are removed from the device's flash memory, Krux will no longer be able to access them. However, as with most operating systems, the data may still be recoverable using specialized tools. If you stored any important keys with a weak encryption key, it is recommended to use the \"Wipe Device\" feature below to ensure that the data is irrecoverable.</p> <p>When mnemonics are removed from an SD card, Krux will overwrite the region where the encrypted mnemonic was stored with empty data. This makes it more secure to delete mnemonics from SD cards using Krux rather than a PC or another device. However, Krux does not have a \"Wipe\" feature for SD cards; you can find this feature in third-party applications.</p>"},{"location":"getting-started/features/tools/#wipe-device","title":"Wipe Device","text":"<p>This option permanently removes all stored encrypted mnemonics and settings from the device's internal flash memory. It ensures that the data is irrecoverable, making it an adequate measure to take if any important mnemonics were stored with a weak encryption key.</p>"},{"location":"getting-started/installing/from-gui/","title":"From GUI application","text":"<p>This page explains how to install Krux with KruxInstaller (GUI).</p>"},{"location":"getting-started/installing/from-gui/#installing-from-a-gui","title":"Installing from a GUI","text":"<p>You can install Krux onto your K210-based device using our official desktop application, which we named KruxInstaller, available for Linux and Windows.</p> <p>Under the hood the GUI uses the same methods described in Installing from pre-build release, i.e. download, verify and flash the latest official release, but you won't need to type any command. Additionally you will be able to install the pre-built test (beta) release too.</p> <p>Keep in mind that this is software under development in the alpha stage and may be buggy. If you find any bugs or want to contribute to the project, please open an issue or make a PR.</p>"},{"location":"getting-started/installing/from-gui/#requirements","title":"Requirements","text":""},{"location":"getting-started/installing/from-gui/#hardware","title":"Hardware","text":"<p>Please, check the part list for the compatible devices and requirements.</p>"},{"location":"getting-started/installing/from-gui/#download-the-latest-release","title":"Download the latest release","text":"<p>The primary way to download the installer is via releases page on Github, search for <code>Assets</code> and click the dropdown arrow:</p> <p></p>"},{"location":"getting-started/installing/from-gui/#archlinux-users","title":"Archlinux users","text":"<p>There is a package named <code>krux-installer-bin</code> for Archlinux in the AUR. To install <code>krux-installer-bin</code>, You need to have the yay package manager installed. Then run on your terminal:</p> <pre><code>yay -Sy krux-installer-bin\n</code></pre>"},{"location":"getting-started/installing/from-gui/#verify-the-files","title":"Verify the files","text":"<p>Before installing the release, it's a good idea to check if the hash sum matches the one defined in the file <code>*.sha256.txt</code>:</p>"},{"location":"getting-started/installing/from-gui/#on-linux","title":"On Linux","text":"<pre><code>sha256sum --check KruxInstaller-0.0.1-alpha-4.AppImage.sha256.txt KruxInstaller-0.0.1-alpha-4.AppImage\n</code></pre>"},{"location":"getting-started/installing/from-gui/#on-windows-with-powershell","title":"On Windows with <code>powershell</code>","text":"<pre><code>(Get-FileHash '.\\KruxInstaller.Setup.0.0.1-alpha-4.exe').Hash -eq (Get-Content '.\\KruxInstaller.Setup.0.0.1-alpha-4.exe.sha256.txt')\n</code></pre>"},{"location":"getting-started/installing/from-gui/#modify-permissions","title":"Modify permissions","text":"<p>If you use Linux, you will need to add permission to allow execution of the <code>.AppImage</code> file:</p> <pre><code>chown +x ./KruxInstaller-0.0.1-alpha-4.AppImage\n</code></pre> <p>If you use Windows, the first time you run the <code>.exe</code> file the system will ask you if you trust the application. Click on <code>more info</code> and then <code>Run anyway</code>.</p>"},{"location":"getting-started/installing/from-gui/#openssl","title":"Openssl","text":"<p>When downloading the official Krux firmware, it is necessary to verify the signature to confirm the authenticity of the binaries using OpenSSL tool.</p> <p>On Linux, verification is easily done since OpenSSL is already installed. On windows we would need to install it first. To avoid that, we packaged a stable version of OpenSSL, compiled from source. The compilation process is done entirely in a virtual environment on github and it is expected to be fully verifiable and free of malicious code. You can check the build steps in github actions.</p>"},{"location":"getting-started/installing/from-gui/#usage","title":"Usage","text":"<p>When running Krux Installer, you will be presented with a menu of three items:</p> <ul> <li>Select device;</li> <li>Select version;</li> <li>Flash;</li> </ul> <p></p>"},{"location":"getting-started/installing/from-gui/#select-device","title":"Select device","text":"<p>This is the first step, to select the device we want to flash. Click on the dropdown arrow to list the supported devices, each one have a different firmware. Then click on SELECT.</p> <p></p>"},{"location":"getting-started/installing/from-gui/#select-version","title":"Select version","text":"<p>Now select which firmware you want to flash, i.e. the latest official release or the test (beta) release. While in the official release we can verify its integrity and authenticity, in the second one we will have no means of verifying it, because it is not signed. However, the test (beta) firmware will contain the newest features that are being developed and discussed on our social media.</p>"},{"location":"getting-started/installing/from-gui/#official-release","title":"Official release","text":"<p>The software will display the latest officially released version in the form <code>selfcustody/tags/vXX.YY.Z</code>, where XX means the year of release, YY the month of release and Z a subversion of this release.</p> <p>Once selected, the application will check if the entry exists in the system. If not, it will download the following files: the firmware as a <code>.zip</code>, the sha256 of the zip as <code>sha256.txt</code>, the signature of the zip as <code>.sig</code> and the <code>selfcustody.pem</code>.</p> <ul> <li> <p><code>krux-vXX.YY.Z.zip</code>: contains all the necessary binaries and signature files to install the firmware on each of the supported devices;</p> </li> <li> <p><code>krux-vXX.YY.Z.zip.sha256.txt</code>: contains a hash to verify the integrity of the downloaded <code>zip</code> file;</p> </li> <li> <p><code>krux.vXX.YY.Z.zip.sig</code>: is the public digital signature for authenticity verification of the downloaded <code>zip</code> file;</p> </li> <li> <p><code>selfcustody.pem</code>: is the public digital certificate that attests to the veracity of the public digital signature.</p> </li> </ul> <p></p> <p>If they are already present on your computer, the application will give you the option to download them again or continue with the files already downloaded.</p> <p></p>"},{"location":"getting-started/installing/from-gui/#test-beta-binaries","title":"Test (beta) binaries","text":"<p>As the name suggests, these binaries are intended for test purposes, contain experimental features, and are more likely to contain bugs. Use only for experimentation and to provide feedback.</p> <p>The installer will present the latest test (beta) release. </p> <ul> <li><code>&lt;device&gt;/firmware.bin</code>: is the unsigned firmware's binary of the choosen device;</li> <li><code>&lt;device&gt;/kboot.kfpkg</code>: is the unsigned and compressed firmware bootloader of the choosen device;</li> <li><code>&lt;device&gt;/ktool-&lt;os&gt;</code>: is the k210 tool \"flasher\" specific to Operational system:<ul> <li><code>ktool-linux</code>: for linux machines;</li> <li><code>ktool-win.exe</code>: for windows machines;</li> </ul> </li> </ul> <p>If they are already present on your computer, the application will give you the option to download them again or continue with the files already downloaded.</p> <p></p>"},{"location":"getting-started/installing/from-gui/#flash","title":"Flash","text":"<p>Once we choose the device and firmware, we can flash. Before start the flash process itself, you be warned that you must plug and power on your device.</p> <p></p> <p>When the flashing process completes, you should see the Krux logo:</p> <p> </p> <p>If after 30 seconds you still see a black screen, try power cycling the device by holding down the power button for six seconds.</p> <p>Congrats, you're now running Krux!</p>"},{"location":"getting-started/installing/from-gui/#a-note-about-the-maix-amigo","title":"A note about the Maix Amigo","text":"<p>Some Amigo screens have inverted X coordinates, others display colors differently. For more info see FAQ</p>"},{"location":"getting-started/installing/from-gui/#multilingual-support","title":"Multilingual support","text":"<p>Prefer a different language? Krux has support for multiple languages. Once at the start screen, go to <code>Settings</code>, followed by <code>Locale</code>, and select the locale you wish to use.</p>"},{"location":"getting-started/installing/from-gui/#upgrade-via-microsd-card","title":"Upgrade via microSD card","text":"<p>Once you've installed the initial firmware on your device via USB, you can either continue updating the device by flashing or you can perform upgrades via microSD card to keep the device airgapped.</p>"},{"location":"getting-started/installing/from-pre-built-release/","title":"From pre-built official release","text":"<p>This page explains how to install Krux from an official, pre-built release.</p>"},{"location":"getting-started/installing/from-pre-built-release/#download-the-latest-release","title":"Download the latest release","text":"<p>Head over to the releases page and download the latest signed release.</p>"},{"location":"getting-started/installing/from-pre-built-release/#verify-the-files","title":"Verify the files","text":"<p>Before installing the release, it's a good idea to check that:</p> <ol> <li>The SHA256 hash of <code>krux-vX.Y.Z.zip</code> matches the hash in <code>krux-vX.Y.Z.zip.sha256.txt</code></li> <li>The signature file <code>krux-vX.Y.Z.zip.sig</code> can be verified with the <code>selfcustody.pem</code> public key found in the root of the krux repository.</li> </ol> <p>You can either do this manually or with the <code>krux</code> shell script, which contains helper commands for this: <pre><code>./krux sha256 krux-vX.Y.Z.zip\n./krux verify krux-vX.Y.Z.zip selfcustody.pem\n</code></pre></p> <p>Fun fact: Each Krux release is signed with Krux!</p>"},{"location":"getting-started/installing/from-pre-built-release/#flash-the-firmware-onto-the-device","title":"Flash the firmware onto the device","text":"<p>Extract the latest version of Krux you downloaded and enter the folder: <pre><code>unzip krux-vX.Y.Z.zip &amp;&amp; cd krux-vX.Y.Z\n</code></pre></p> <p>Connect the device to your computer via USB (for Maix Amigo, make sure you\u2019re using bottom port), power it on, and run the following, replacing <code>DEVICE</code> with either <code>m5stickv</code>, <code>amigo</code>, <code>bit</code> or <code>yahboom</code> (to yahboom you may need to manually specify the port): <pre><code>./ktool -B goE -b 1500000 maixpy_DEVICE/kboot.kfpkg\n</code></pre></p> <p>For <code>dock</code> the <code>-B</code> parameter changes, so run: <pre><code>./ktool -B dan -b 1500000 maixpy_dock/kboot.kfpkg\n</code></pre></p> <p>When the flashing process completes, you should see the Krux logo:</p> <p> </p> <p>If after 30 seconds you still see a black screen, try power cycling the device by holding down the power button for six seconds.</p> <p>Congrats, you're now running Krux!</p>"},{"location":"getting-started/installing/from-pre-built-release/#a-note-about-the-maix-amigo","title":"A note about the Maix Amigo","text":"<p>Some Amigo screens have inverted X coordinates, others display colors differently. For more info see FAQ</p>"},{"location":"getting-started/installing/from-pre-built-release/#troubleshooting","title":"Troubleshooting","text":"<p>If <code>ktool</code> fails to run, you may need to give it executable permissions with <code>chmod +x ./ktool</code>, or you might need to use \"sudo\" if your user don't have access to serial port. In Windows or Mac you may need to explicitly allow the tool to run by adding an exception for it.</p> <p>If the flashing process fails midway through, check the connection, restart the device, and try the command again.</p> <p>Two serial ports are created when <code>Amigo</code> and <code>Bit</code> are connected to a PC. Sometimes Ktool will pick the wrong and flash will fail. Manually specify the serial port to overcome this issue using <code>-p</code> argument:</p> <pre><code>./ktool-linux -B goE -b 1500000 maixpy_amigo/kboot.kfpkg -p /dev/ttyUSB1\n</code></pre> <p>Check por names of devices manager on Windows (e.g. COM1, COM9), or list the ports on linux</p> <pre><code>ls /dev/ttyUSB*\n</code></pre> <p>List ports on Mac</p> <p><pre><code>ls /dev/cu.usbserial*\n</code></pre> Different OS versions may have different port names, and the absence of ports may indicate a connection, driver or hardware related issue.</p>"},{"location":"getting-started/installing/from-pre-built-release/#multilingual-support","title":"Multilingual support","text":"<p>Prefer a different language? Krux has support for multiple languages. Once at the start screen, go to <code>Settings</code>, followed by <code>Locale</code>, and select the locale you wish to use.</p>"},{"location":"getting-started/installing/from-pre-built-release/#upgrade-via-microsd-card","title":"Upgrade via microSD card","text":"<p>Once you've installed the initial firmware on your device via USB, you can either continue updating the device by flashing or you can perform upgrades via microSD card to keep the device airgapped.</p>"},{"location":"getting-started/installing/from-source/","title":"From source","text":"<p>This page explains how to install Krux from source.</p>"},{"location":"getting-started/installing/from-source/#software","title":"Software","text":"<p>You will need a computer with <code>git</code> and <code>vagrant</code> installed.</p>"},{"location":"getting-started/installing/from-source/#fetch-the-code","title":"Fetch the code","text":"<p>In a terminal, run the following: <pre><code>git clone --recurse-submodules https://github.com/selfcustody/krux\n</code></pre> This will pull down the Krux source code as well as the code for all its dependencies and put them inside a new <code>krux</code> folder.</p> <p>Note: When you wish to pull down updates to this repo, you can run the following inside the <code>krux</code> folder: <pre><code>git pull origin main &amp;&amp; git submodule update --init --recursive\n</code></pre></p>"},{"location":"getting-started/installing/from-source/#spin-up-a-virtual-machine","title":"Spin up a virtual machine","text":"<p>After you have installed Vagrant, run the following inside the <code>krux</code> folder to spin up a new VM: <pre><code>vagrant up\n</code></pre></p>"},{"location":"getting-started/installing/from-source/#build-the-firmware","title":"Build the firmware","text":""},{"location":"getting-started/installing/from-source/#prerequisite-for-upgrading-via-microsd","title":"Prerequisite for upgrading via microSD","text":"<p>If you wish to perform airgapped upgrades via microSD card, you will need to have a private and public key pair to sign your builds and verify the signatures.</p> <p>You can use an existing Krux installation and mnemonic to sign your builds with, or you can generate a keypair and sign from the <code>openssl</code> CLI. Commands have been added to the <code>krux</code> shell script to make this easier.</p> <p>In either case, you will need to update the <code>SIGNER_PUBKEY</code> field in <code>src/krux/metadata.py</code> to store your public key so that Krux can verify future builds before installing.</p> <p>To generate a keypair, run: <pre><code>vagrant ssh -c 'cd /vagrant; ./krux generate-keypair'\nvagrant ssh -c 'cd /vagrant; ./krux pem-to-pubkey pubkey.pem'\n</code></pre></p> <p>The first command will create <code>privkey.pem</code> and <code>pubkey.pem</code> files you can use with openssl, and the second command will output your public key in the form expected by Krux.</p> <p>Once you've updated the <code>SIGNER_PUBKEY</code> with this value, you can proceed with the regular build process.</p>"},{"location":"getting-started/installing/from-source/#build","title":"Build","text":"<p>Run the following, replacing <code>DEVICE</code> with either <code>m5stickv</code>, <code>amigo</code>, <code>dock</code>, <code>bit</code> or <code>yahboom</code>: <pre><code>vagrant ssh -c 'cd /vagrant; ./krux build maixpy_DEVICE'\n</code></pre></p> <p>This will take around an hour or so to complete the first time. Subsequent builds should take only a few minutes.</p> <p>If all goes well, you should see a new <code>build</code> folder containing <code>firmware.bin</code> and <code>kboot.kfpkg</code> files when the build completes.</p>"},{"location":"getting-started/installing/from-source/#reproducibility","title":"Reproducibility","text":"<p>If you build from the <code>main</code> branch of the source code, you should be able to reproduce the build process used to generate the last release binaries and obtain exact copies of the <code>firmware.bin</code> and <code>kboot.kfpkg</code> files, with matching hash checksums.</p> <p>To extract and verify the firmware.bin contained in kboot.kfpkg, you can use the following command:</p> <p><code>unzip kboot.kfpkg -d ./kboot/</code></p>"},{"location":"getting-started/installing/from-source/#flash-the-firmware-onto-the-device","title":"Flash the firmware onto the device","text":"<p>Connect the device to your computer via USB (for Maix Amigo, make sure you\u2019re using bottom port), power it on, and run the following, replacing <code>DEVICE</code> with either <code>m5stickv</code>, <code>amigo</code>, <code>dock</code>, <code>bit</code> or <code>yahboom</code>: <pre><code>vagrant ssh -c 'cd /vagrant; ./krux flash maixpy_DEVICE'\n</code></pre> If the flashing fails try one of the following common solutions:</p> <ul> <li>Running <code>vagrant reload</code> prior to flashing in order for the newly-inserted USB device to be detected and passed through to the VM on startup.</li> <li>If this command fails, even after reloading, with the error <code>Failed to find device via USB. Is it connected and powered on?</code>, make sure that your user has been added to the <code>vboxusers</code> group. On Mac or Linux, run the following command:   <pre><code>sudo usermod -a -G vboxusers yourusername\n</code></pre></li> <li>If the flashing process fails midway through, check the connection, restart the device, and try the command again.</li> </ul> <p>When the flashing process completes, you should see the Krux logo:</p> <p> </p> <p>If after 30 seconds you still see a black screen, try power cycling the device by holding down the power button for six seconds.</p> <p>Congrats, you're now running Krux!</p>"},{"location":"getting-started/installing/from-source/#a-note-about-the-maix-amigo","title":"A note about the Maix Amigo","text":"<p>Some Amigo screens have inverted X coordinates, others display colors differently. For more info see FAQ</p>"},{"location":"getting-started/installing/from-source/#multilingual-support","title":"Multilingual support","text":"<p>Prefer a different language? Krux has support for multiple languages. Once at the start screen, go to <code>Settings</code>, followed by <code>Locale</code>, and select the locale you wish to use.</p>"},{"location":"getting-started/installing/from-source/#upgrade-via-microsd-card","title":"Upgrade via microSD card","text":"<p>Once you've installed the initial firmware on your device via USB, you can either continue updating the device by flashing or you can perform upgrades via microSD card to keep the device airgapped.</p> <p>After you've built the firmware, you can sign it using one of the following methods:</p>"},{"location":"getting-started/installing/from-source/#method-1-signing-from-krux","title":"Method 1: Signing from Krux","text":"<p>First, calculate the SHA256 hash of the new firmware by running: <pre><code>vagrant ssh -c 'cd /vagrant; ./krux sha256 build/firmware.bin'\n</code></pre></p> <p>Copy this hex string and turn it into a QR code using whichever QR code generator you'd like.</p> <p>In Krux, enter the mnemonic of your private key that will be used for signing, and go to Sign &gt; Message. Scan the QR code you generated, and you will be asked if you wish to sign the hash. Proceed, and you will be presented with a base64-encoded string containing the signature, as text and as a QR code.</p> <p>Take this string and create a signature file by running: <pre><code>vagrant ssh -c 'cd /vagrant; ./krux b64decode \"signature-in-base64\" &gt; build/firmware.bin.sig'\n</code></pre></p> <p>This will generate a <code>firmware.bin.sig</code> file containing a signature of the firmware's SHA256 hash.</p>"},{"location":"getting-started/installing/from-source/#method-2-signing-from-your-computer-with-openssl","title":"Method 2: Signing from your computer with OpenSSL","text":"<p>With the keypair you generated before, you can now run: <pre><code>vagrant ssh -c 'cd /vagrant; ./krux sign build/firmware.bin privkey.pem'\n</code></pre></p> <p>This will generate a <code>firmware.bin.sig</code> file containing a signature of the firmware's SHA256 hash.</p>"},{"location":"getting-started/installing/from-test-release/","title":"From pre-built test release","text":"<p>This page explains how to install Krux from a test (beta), pre-built release.</p>"},{"location":"getting-started/installing/from-test-release/#warning","title":"Warning","text":"<p>Keep in mind that these are unsigned binaries.</p>"},{"location":"getting-started/installing/from-test-release/#download","title":"Download","text":"<p>Download experimental compiled firmware or the Android app <code>apk</code>: Krux binaries</p>"},{"location":"getting-started/installing/from-test-release/#android","title":"Android","text":"<p>Krux Android app is intended for learning about Krux and Bitcoin airgapped transactions. Vulnerabilities inherent to Android phones such as the OS, other apps and wireless / CDMA / GSM / Bluetooth connectivity make using any phone insecure. Krux app should NOT be used to manage savings or important keys and mnemonics. For that, a dedicated device is recommended.</p>"},{"location":"getting-started/installing/from-test-release/#m5stickv","title":"M5StickV","text":""},{"location":"getting-started/installing/from-test-release/#linux","title":"Linux","text":"<p>To Flash M5stickV run: <pre><code>./ktool-linux -B goE -b 1500000 maixpy_m5stickv/kboot.kfpkg\n</code></pre></p>"},{"location":"getting-started/installing/from-test-release/#windows","title":"Windows","text":"<p>Replace './ktool-linux' for 'ktool-win.exe' and / for \\ in commands: <pre><code>./ktool-win.exe -B goE -b 1500000 maixpy_m5stickv\\kboot.kfpkg\n</code></pre></p>"},{"location":"getting-started/installing/from-test-release/#sipeed-maix-amigo","title":"Sipeed Maix Amigo","text":""},{"location":"getting-started/installing/from-test-release/#linux_1","title":"Linux","text":"<p>To Flash Maix Amigo run: <pre><code>./ktool-linux -B goE -b 1500000 maixpy_amigo/kboot.kfpkg\n</code></pre></p>"},{"location":"getting-started/installing/from-test-release/#windows_1","title":"Windows","text":"<p>Replace './ktool-linux' for 'ktool-win.exe' and / for \\ in commands: <pre><code>./ktool-win.exe -B goE -b 1500000 maixpy_amigo\\kboot.kfpkg\n</code></pre></p>"},{"location":"getting-started/installing/from-test-release/#a-note-about-the-maix-amigo","title":"A note about the Maix Amigo","text":"<p>Some Amigo screens have inverted X coordinates, others display colors differently. For more info see FAQ</p>"},{"location":"getting-started/installing/from-test-release/#sipeed-maix-bit","title":"Sipeed Maix Bit","text":""},{"location":"getting-started/installing/from-test-release/#linux_2","title":"Linux","text":"<p>To Flash Maix Bit run: <pre><code>./ktool-linux -B goE -b 1500000 maixpy_bit/kboot.kfpkg\n</code></pre></p>"},{"location":"getting-started/installing/from-test-release/#windows_2","title":"Windows","text":"<p>Replace './ktool-linux' for 'ktool-win.exe' and / for \\ in commands: <pre><code>./ktool-win.exe -B goE -b 1500000 maixpy_bit\\kboot.kfpkg\n</code></pre></p>"},{"location":"getting-started/installing/from-test-release/#sipeed-maix-dock","title":"Sipeed Maix Dock","text":""},{"location":"getting-started/installing/from-test-release/#linux_3","title":"Linux","text":"<p>To Flash Maix Dock run: <pre><code>./ktool-linux -B dan -b 1500000 maixpy_dock/kboot.kfpkg\n</code></pre></p>"},{"location":"getting-started/installing/from-test-release/#windows_3","title":"Windows","text":"<p>Replace './ktool-linux' for 'ktool-win.exe' and / for \\ in commands: <pre><code>./ktool-win.exe -B dan -b 1500000 maixpy_dock\\kboot.kfpkg\n</code></pre></p>"},{"location":"getting-started/installing/from-test-release/#aimotion-yahboom-k210-module","title":"Aimotion Yahboom k210 module","text":""},{"location":"getting-started/installing/from-test-release/#linux_4","title":"Linux","text":"<p>To Flash Yahboom k210 module you'll have to manually specify the port, on this example <code>/dev/ttyUSB0</code>: <pre><code>./ktool-linux -B goE -b 1500000 -p /dev/ttyUSB0 yahboom/kboot.kfpkg\n</code></pre></p>"},{"location":"getting-started/installing/","title":"Installing","text":"<p>You can install Krux in four different ways:</p> <ul> <li> From GUI application</li> <li> From pre-built official release</li> <li> From pre-built test (beta) release</li> <li> From source</li> </ul>"},{"location":"getting-started/installing/#requirements","title":"Requirements","text":"<p>Please, check the part list for the compatible devices and requirements.</p> <p>After the first firmware install, you can use a microSD card if you wish to perform further airgapped updates.</p>"},{"location":"getting-started/usage/generating-a-mnemonic/","title":"Generating a Mnemonic","text":"<p>Krux has support for creating 12 and 24-word mnemonic seed phrases. Since true entropy is difficult to produce, especially with an embedded device, we recommend to outsource entropy generation using dice rolls, but it is also possible to use camera as a source of entropy to quickly create a mnemonic. At the start screen, once you select <code>New Mnemonic</code>, you will be taken to a second menu where you can choose to create a mnemonic via camera, via rolls of a D6 (standard six-sided die) or D20 (20-sided die).</p> <p> </p>"},{"location":"getting-started/usage/generating-a-mnemonic/#camera","title":"Camera","text":"<p>(Experimental!) Choose between 12 or 24 words, then take a random picture and Krux will generate a mnemonic from the hash of the image bytes.</p> <p> </p>"},{"location":"getting-started/usage/generating-a-mnemonic/#image-entropy-quality-estimation","title":"Image Entropy Quality Estimation","text":"<p>During image capture, entropy quality estimation is displayed to assist you in obtaining a high-quality image source for your key. After a snapshot is taken, Shannon's entropy and pixel deviation indices are presented. Minimum thresholds are established to prevent the use of poor-quality images with low entropy for key generation. It's important to note that these values serve as indicators or estimations of entropy quality, but they are not absolute entropy values in a cryptographic context.</p>"},{"location":"getting-started/usage/generating-a-mnemonic/#dice-rolls","title":"Dice Rolls","text":""},{"location":"getting-started/usage/generating-a-mnemonic/#via-d6","title":"Via D6","text":"<p>Choose between 12 or 24 words.</p> <p>The entropy in a single roll of a D6 is 2.585 bits ( log<sub>2</sub>(6) ); therefore a minimum of a 50 rolls will be required for 128 bits of entropy, enough to generate a 12-word mnemonic. For 24 words, or an entropy of 256 bits, a minimum of 99 rolls will be required.</p> <p> </p>"},{"location":"getting-started/usage/generating-a-mnemonic/#via-d20","title":"Via D20","text":"<p>Since a D20 has more possible outcomes, the entropy is increased per roll to 4.322 bits ( log<sub>2</sub>(20) ). This means that only 30 rolls are necessary to create a 12-word mnemonic and 60 rolls for a 24-word mnemonic.</p> <p> </p>"},{"location":"getting-started/usage/generating-a-mnemonic/#dice-rolls-entropy-quality-estimation","title":"Dice Rolls Entropy Quality Estimation","text":"<p>When you input your dice rolls, you'll see two progress bars filling up. The top progress bar shows how many rolls you've entered compared to the minimum number needed. The bottom progress bar shows the real-time calculated Shannon's entropy compared to the required minimum (128 bits for 12 words and 256 bits for 24 words). When the Shannon's entropy estimation reaches the recommended level, the progress bar will be full, and its frame will change color. If you've met the minimum number of rolls but the entropy estimation is still below the recommended level, a warning will appear, suggesting you add more rolls to increase entropy. Note: Similar to image entropy quality estimation, dice rolls Shannon's entropy serves as an indicator and should not be considered an absolute measure of cryptographic entropy.</p>"},{"location":"getting-started/usage/generating-a-mnemonic/#stats-for-nerds","title":"Stats for Nerds","text":"<p>A low Shannon's entropy value might suggest that your dice are biased or that there's a problem with how you're gathering entropy. To investigate further, examine the \"Stats for Nerds\" section to check the distribution of your rolls and look for any abnormalities.</p> <p> </p>"},{"location":"getting-started/usage/generating-a-mnemonic/#how-it-works","title":"How it works","text":"<p>For dice rolls, Krux keeps track of every roll you enter and displays the cumulative string of outcomes after each roll. </p> <p>When you have entered your final roll, Krux will hash this string using SHA256 and output the resulting hash to the screen so that you can verify it for yourself.</p> <p>In the case a camera snapshot is used as source, image bytes, which contain pixels data in RGB565 format, will be hashed just like it is done with the dice rolls string.</p> <p> </p> <p>Krux then takes this hash, runs <code>unhexlify</code> on it to encode it as bytes, and deterministically converts it into a mnemonic according to the BIP-39 Reference Implementation.</p> <p>Note: For 12-word mnemonics, only the first half of the SHA256 hash is used (128 bits), while 24-word mnemonics use the full hash (256 bits).</p>"},{"location":"getting-started/usage/generating-a-mnemonic/#how-to-verify","title":"How to verify","text":"<p>Don't trust, verify.  We encourage you not to trust any claim you cannot verify yourself. Therefore, there are wallets that use compatible algorithms to calculate the entropy derived from dice rolls. You can use the SeedSigner or Coldcard hardware wallets, or even the Bitcoiner Guide website, they share the same logic that Krux uses and will give the same mnemonic for the dice roll method.</p>"},{"location":"getting-started/usage/generating-a-mnemonic/#alternatives","title":"Alternatives","text":"<p>You can use any other offline airgapped devices to generate your mnemonic. If you have an old Android smartphone that is offline (airplane mode [no active CDMA or GSM chip], no Wifi connection, no Bluetooth and localization service turned off), you can use the Krux app for Android. If you want to use a regular PC, a common strategy is to boot the PC using Tails from a USB stick, without connecting the device to the internet, and then you can run Krux using our simulator, use a copy of the the Bitcoiner Guide website or even Ian Coleman's BIP-39 Tool. It's worth noting that both generate a QR code that Krux can read via the QR input method mentioned on the next page (Loading a Mnemonic).</p>"},{"location":"getting-started/usage/loading-a-mnemonic/","title":"Loading a Mnemonic","text":"<p>Once you have either a 12- or 24-word mnemonic, choose <code>Load Mnemonic</code> on Krux's start menu, and you will be presented with several input methods:</p> <p> </p>"},{"location":"getting-started/usage/loading-a-mnemonic/#input-methods","title":"Input Methods","text":""},{"location":"getting-started/usage/loading-a-mnemonic/#via-camera","title":"Via Camera","text":"<p>You can choose to use the camera to scan a <code>QR code</code> or <code>Tiny Seed</code> metal plate backup.</p>"},{"location":"getting-started/usage/loading-a-mnemonic/#qr-code","title":"QR Code","text":"<p>It's unpleasant having to manually enter 12 or 24 words every time you want to use Krux. To remedy this you can instead use the device's camera to read a QR code containing the words. Krux will decode QR codes of four types:</p> <ol> <li>Plain text QR: The mnemonic words encoded as text, with words separated by spaces.</li> <li>SeedQR: Basically, it is the mnemonic words of the respective BIP-39 numbers concatenated, encoded as text.</li> <li>Compact SeedQR: Basically, it is the mnemonic words bits concatenated as bytes.</li> <li>Encrypted Mnemonic: A specification created by Krux that encrypts the mnemonic words bits and adds some information about the encryption used.</li> </ol> <p>After opening your wallet via one of the manual methods you can use Krux to create QR codes of all types above, transcript them to paper or metal using the transcription helpers or attach a thermal printer to your Krux and print out the mnemonic. Check out the Printing section for more information. You can also use an offline QR code generator for this (ideally on an airgapped device).</p>"},{"location":"getting-started/usage/loading-a-mnemonic/#tiny-seed","title":"Tiny Seed","text":"<p>Tiny Seed is a compact metal plate mnemonic backup method. Krux devices have machine vision capabilities that allow users to scan these metal plates and instantly load mnemonics engraved on them. To properly scan them place the Tiny Seed over a black background and paint the punched bits black to increase contrast. You can also scan the thermally printed version, or a filled template. Find templates to scan or print here.</p>"},{"location":"getting-started/usage/loading-a-mnemonic/#via-manual-input","title":"Via Manual Input","text":"<p>Manually type <code>Words</code>, <code>Word Numbers</code>, <code>Tiny Seed</code> (toggle the bits or punches) or <code>Stackbit</code> (model 1248 metal plate backup).</p>"},{"location":"getting-started/usage/loading-a-mnemonic/#words","title":"Words","text":"<p>Enter each word of your BIP-39 mnemonic one at a time. Krux will disable impossible-to-reach letters as you type and will attempt to autocomplete your words to speed up the process.</p> <p>On your 12th or 24th word, you can leave it blank to have Krux generate the final checksum word of your mnemonic for you. This is useful when you choose a manual method to generate your mnemonic and want the final BIP-39 checksum word to be valid.</p>"},{"location":"getting-started/usage/loading-a-mnemonic/#word-numbers","title":"Word Numbers","text":""},{"location":"getting-started/usage/loading-a-mnemonic/#decimal","title":"Decimal","text":"<p>Enter each word of your BIP-39 mnemonic as a number from 1 to 2048 one at a time. You can use this list for reference.</p>"},{"location":"getting-started/usage/loading-a-mnemonic/#hexadecimal-and-octal","title":"Hexadecimal and Octal","text":"<p>You can also enter your BIP-39 mnemonic word's numbers (1-2048) in hexadecimal format, with values ranging from 0x1 to 0x800, or in octal format, with values ranging from 01 to 04000. This is useful with some metal plate backups that uses those formats.</p>"},{"location":"getting-started/usage/loading-a-mnemonic/#final-checksum-word","title":"Final checksum word","text":"<p>On your 12th or 24th word, you can leave it blank to have Krux generate the final checksum word of your mnemonic for you. This is useful when you choose a manual method to generate your mnemonic and want the final BIP-39 checksum word to be valid.</p>"},{"location":"getting-started/usage/loading-a-mnemonic/#tiny-seed-bits","title":"Tiny Seed (Bits)","text":"<p>Enter the BIP-39 mnemonic word's numbers (1-2048) in binary format, toggling necessary bits to recreate each of the word's respective number. The last word will have checksum bits dynamically toggled while you fill the bits.</p>"},{"location":"getting-started/usage/loading-a-mnemonic/#stackbit-1248","title":"Stackbit 1248","text":"<p>Enter the BIP-39 mnemonic word's numbers (1-2048) using the Stackbit 1248 metal plate backup method, where each of the four digits of the word's number is a sum of the numbers marked (punched) 1, 2, 4, or 8. For example, to enter the word \"pear\", number 1297, you must punch (1)(2)(1+8=9)(1+2+4=7).</p>"},{"location":"getting-started/usage/loading-a-mnemonic/#from-storage","title":"From Storage","text":"<p>You can retrieve mnemonics previously stored on device's internal flash or external (SD card). All stored mnemonics are encrypted, to load them you'll have to enter the same key you used to encrypt them.</p>"},{"location":"getting-started/usage/loading-a-mnemonic/#wallet-loading-sequence","title":"Wallet loading sequence","text":""},{"location":"getting-started/usage/loading-a-mnemonic/#confirm-mnemonic-words","title":"Confirm Mnemonic Words","text":"<p>Once you have entered your mnemonic, you will be presented with the full list of words to confirm.</p>"},{"location":"getting-started/usage/loading-a-mnemonic/#passphrase","title":"Passphrase","text":"<p>After confirming the mnemonic words, you can optionally choose to type or scan a BIP-39 passphrase. You can create a QR code from your passphrase offline in Tools section.</p>"},{"location":"getting-started/usage/loading-a-mnemonic/#fingerprint","title":"Fingerprint","text":"<p>The wallet's fingerprint, if you have it noted down, will help you make sure you entered the correct mnemonic and passphrase (optional) and will load the expected wallet.</p>"},{"location":"getting-started/usage/loading-a-mnemonic/#single-sig-or-multisig","title":"Single-sig or Multisig","text":"<p>After loading your mnemonic and passphrase (optional), you will be asked if you want to use it as part of a <code>Single-sig</code> or <code>Multisig</code> wallet.</p> <p>Your choice here will subtly change the generated xpub that is used to set up your device in your wallet coordinator software. You can learn more about the difference in the following guides for using single-sig and multisig wallets.</p> <p>Now, onto the main menu...</p>"},{"location":"getting-started/usage/navigating-the-main-menu/","title":"Navigating the Main Menu","text":"<p>After entering your mnemonic, and loading a wallet, you will find yourself on Krux's main menu. Below is a breakdown of the entries available:</p> <p> </p>"},{"location":"getting-started/usage/navigating-the-main-menu/#mnemonic","title":"Mnemonic","text":"<p>This will open a new submenu with the following options to backup your mnemonic. If you set a printer driver, it will also give the option to print the backup!</p>"},{"location":"getting-started/usage/navigating-the-main-menu/#words","title":"Words","text":"<p>Display the mnemonic words as text so you can write them down.</p>"},{"location":"getting-started/usage/navigating-the-main-menu/#numbers","title":"Numbers","text":"<p>Display the mnemonic word numbers in decimal, hex, or octal format.</p>"},{"location":"getting-started/usage/navigating-the-main-menu/#plaintext-qr","title":"Plaintext QR","text":"<p>Generate a QR containing the mnemonic words as regular text, where words are separated by spaces.</p>"},{"location":"getting-started/usage/navigating-the-main-menu/#compact-seedqr","title":"Compact SeedQR","text":"<p>A QR code is created from a binary representation of mnemonic words. Format created by SeedSigner backup-qr-compact</p>"},{"location":"getting-started/usage/navigating-the-main-menu/#seedqr","title":"SeedQR","text":"<p>Words are converted to their BIP-39 numeric indexes, those numbers are then concatenated as a string and finally converted to a QR code. Format created by SeedSigner</p>"},{"location":"getting-started/usage/navigating-the-main-menu/#stackbit-1248","title":"Stackbit 1248","text":"<p>This metal backup format represents the BIP-39 mnemonic word's numbers (1-2048). Each of the four digits is converted to a sum of 1, 2, 4 or 8. This option does not print even if a printer driver is set.</p>"},{"location":"getting-started/usage/navigating-the-main-menu/#tiny-seed","title":"Tiny Seed","text":"<p>This metal backup format represents the BIP-39 mnemonic word's numbers (1-2048) in binary format on a metal plate, where the 1's are marked (punched) and the 0's are left intact.</p>"},{"location":"getting-started/usage/navigating-the-main-menu/#encrypt-mnemonic","title":"Encrypt Mnemonic","text":"<p>This feature allows you to back up your mnemonic by encrypting it and storing it on the device's flash memory, an SD card, or in QR code format. You can customize the encryption method and parameters in the settings.</p> <p>For convenience, you may choose to store the encrypted mnemonic on flash memory or an SD card, but it is advisable not to rely solely on these methods for backup. Flash storage can degrade over time and may be subject to permanent damage, resulting in the loss of stored information.</p> <p>When using any of the encryption methods, you will be prompted to enter an encryption key. This key can be provided in text or QR code format. Additionally, you have the option to set a custom ID for easier management of your mnemonics. If a custom key is not specified, the device's current loaded wallet fingerprint will be used as the ID.</p>"},{"location":"getting-started/usage/navigating-the-main-menu/#store-on-flash","title":"Store on Flash","text":"<p>This option stores the encrypted mnemonic in the device's flash memory. You can decrypt and load it later through the \"Load Mnemonic\" -&gt; \"From Storage\" option.</p>"},{"location":"getting-started/usage/navigating-the-main-menu/#store-on-sd-card","title":"Store on SD Card","text":"<p>If an SD card is available, this option stores the encrypted mnemonic on it. You can decrypt and load it later through the \"Load Mnemonic\" -&gt; \"From Storage\" option.</p>"},{"location":"getting-started/usage/navigating-the-main-menu/#encrypted-qr-code","title":"Encrypted QR Code","text":"<p>This option converts the encrypted mnemonic into a QR code. When you scan this QR code through \"Load Mnemonic\" -&gt; \"Via Camera\" -&gt; \"QR Code,\" you will be prompted to enter the decryption key to load the mnemonic stored in it.</p> <p>Learn more about Krux Mnemonics Encryption</p>"},{"location":"getting-started/usage/navigating-the-main-menu/#extended-public-key","title":"Extended Public Key","text":"<p>A menu will be presented with options to display your master extended public key (xPub) as text and as a QR code. Depending on whether a single-sig or multisig wallet was loaded, the options shown will be xPub, zPub, or ZPub. When displayed as text, the extended public key can be stored on an SD card if available. If you choose to export a QR code, you can not only scan it but also save it as an image on an SD card or print it if a thermal printer is attached.</p> <p> </p> <p>All QR codes will contain key origin information in key expressions. If your coordinator cannot parse this information, it will not be capable of importing the wallet's fingerprint. As a result, Krux will not be able to sign transactions created by it unless you manually add the fingerprint so that it can be used to create Krux compatible PSBTs.</p>"},{"location":"getting-started/usage/navigating-the-main-menu/#wallet-descriptor","title":"Wallet Descriptor","text":"<p>When you select this option for the first time, you will be prompted to load a wallet. The camera will activate, and you will need to scan a wallet backup QR code generated by your wallet coordinator software. If the scan is successful, a preview of the wallet will be displayed for confirmation. If you abort the scan, you can alternatively load the wallet descriptor from an SD card.</p> <p> </p> <p>If you access this option again after having loaded your wallet, you will see the wallet's name, fingerprints and the abbreviated xPubs of all cosigners, along with a QR code containing the exact data that was initially loaded. If an SD card is inserted, you can save the descriptor to it. Additionally, if you have a thermal printer attached, you can print this QR code.</p> <p>Please note that once a wallet is loaded, it cannot be changed. To load a different wallet, you will need to restart the device and re-enter your mnemonic.</p>"},{"location":"getting-started/usage/navigating-the-main-menu/#address","title":"Address","text":"<p>Scan, verify, export or print your wallet addresses.</p>"},{"location":"getting-started/usage/navigating-the-main-menu/#scan-address","title":"Scan Address","text":"<p>This option turns on the camera and allows you to scan in a QR code of a receive address. Upon scanning, it will render its own QR code of the address back to the display along with the (text) address below it. You could use this feature to scan the address of someone you want to send coins to and display the QR back to your wallet coordinator rather than copy-pasting an address.</p> <p>If you have a thermal printer attached, you can also print this QR code. </p> <p>After proceeding through this screen, you will be asked if you want to check that the address belongs to your wallet. If you confirm, it will exhaustively search through as many addresses derived from your wallet as you want in order to find a match.</p> <p>This option exists as an extra security check to verify that the address your wallet coordinator has generated is authentic and belongs to your wallet.</p>"},{"location":"getting-started/usage/navigating-the-main-menu/#receive-addresses","title":"Receive Addresses","text":"<p>List your wallet receiving addresses, you can browse to select an arbitrary address to show your QRCode and print if you want</p>"},{"location":"getting-started/usage/navigating-the-main-menu/#change-addresses","title":"Change Addresses","text":"<p>List your wallet change addresses, you can browse to select an arbitrary address to show your QRCode and print if you want</p>"},{"location":"getting-started/usage/navigating-the-main-menu/#sign","title":"Sign","text":"<p>Under Sign, you can choose to sign a PSBT or a message. You can load both PSBTs and messages scanning QR codes or loading from files on a SD card.</p>"},{"location":"getting-started/usage/navigating-the-main-menu/#psbt","title":"PSBT","text":"<p>To sign a Bitcoin PSBT, you have the following options:</p> <ol> <li>Scan an Animated QR Code: Turn on the camera and scan an animated QR code of a PSBT generated by your wallet coordinator software.</li> <li>Load from SD Card: Load an unsigned PSBT file from your SD card.</li> </ol> <p>Upon loading the PSBT, you will be presented with a preview showing the amount of BTC being sent, the recipient's address, and the transaction fee. Amounts are displayed according to your locale and the International Bureau of Weights and Measures, while still adhering to the concept of the Satcomma standard format.</p> <p>If you choose to proceed and sign the transaction, the signed PSBT can be exported in two ways:</p> <ol> <li>As an animated QR code, which can be scanned back into your coordinator wallet.</li> <li>As a signed PSBT file, which can be saved to your SD card and then loaded back into your coordinator wallet for broadcasting.</li> </ol> <p>If a thermal printer is attached to your device, you can also print the PSBT QR codes for record-keeping or further processing.</p>"},{"location":"getting-started/usage/navigating-the-main-menu/#message","title":"Message","text":"<p>Similar to PSBTs, Krux can load, sign, and export signatures for messages. This feature allows you to attest not only to the ownership of the messages themselves but also to the ownership of Bitcoin addresses and the authorship of documents and files.</p>"},{"location":"getting-started/usage/navigating-the-main-menu/#standard-messages-and-files","title":"Standard Messages and Files","text":"<p>You can scan or load a file from an SD card, the content can be plaintext or the SHA-256 hash of a message. Upon loading, you will be shown a preview of the message's SHA-256 hash for confirmation before signing.</p> <p>If you confirm, a signature will be generated, and you will see a base64-encoded version of it. You can then choose to export it as a QR code or save it to an SD card. If a thermal printer is attached, you can also print the QR code.</p> <p>Following this, you will see and be allowed to export your raw (master) public key in hexadecimal form, which can be used by others to verify your signature. If a thermal printer is attached, you can also print this QR code.</p> <p>This feature is used to sign Krux releases, airgapped, using a Krux device.</p>"},{"location":"getting-started/usage/navigating-the-main-menu/#messages-at-address","title":"Messages at Address","text":"<p>Coordinators like Sparrow and Specter offer the possibility to sign messages at a Bitcoin receive address, allowing you to attest ownership of that address. Krux will detect if the message is of this type and present a similar workflow for signing. The main difference is that the address will be displayed along with the raw message, and since the message is signed with a derived address instead of the master public key, Krux won't offer the option to export the raw public key after the signature.</p>"},{"location":"getting-started/usage/using-a-multisig-wallet/","title":"Using a Multisig Wallet","text":"<p>This guide assumes you have already created a mnemonic for each cosigner that will be in your multisig wallet. If that is not the case, head over to the Generating a Mnemonic page and complete those steps first.</p> <p>When entering your mnemonics into Krux, make sure to select <code>Multisig</code> for all keys in your multisignature scheme. The choice of <code>Single-sig</code> vs. <code>Multisig</code> at this point will change the derivation path used to generate your master extended public key (xpub) which will affect how wallet software handles it.</p> <p> </p> <p>Selecting <code>Multisig</code> will derive an xpub using the derivation path <code>m/48'/0'/0'/2'</code> on mainnet and <code>m/48'/1'/0'/2'</code> on testnet, which indicates to wallet software that a Multisig Wallet script type should be used, specifically the Native Segwit script <code>P2WSH</code>, or just <code>wsh</code>.</p> <p>Note: While not required, the load of the <code>Wallet Descriptor</code> is strongly recommended to load your multisig wallet into Krux before signing a PSBT as it will allow the device to verify that the transaction it is signing has the correct list of cosigners as defined in the wallet. It is also useful if you wish to print a backup of the wallet or visually inspect the list of cosigners being output by your wallet coordinator.</p>"},{"location":"getting-started/usage/using-a-multisig-wallet/#specter-desktop","title":"Specter Desktop","text":""},{"location":"getting-started/usage/using-a-multisig-wallet/#create-the-wallet","title":"Create the wallet","text":"<p>In Specter Desktop, you will need to import your public key by adding a new device. Press the Add new device button on the left side of the app.</p> <p></p> <p>Krux is not listed as one of the available device types on the Add Device screen, so you will need to select the Other option.</p> <p></p> <p>You will be taken to the Upload Keys screen where you can choose to Scan QR code.</p> <p></p> <p>On your Krux, navigate to the Extended Public Key option under the main menu and show the first QR code to Specter Desktop.</p> <p> </p> <p>It should import the xpub and display the Purpose as #0 Multisig Sig (Segwit).</p> <p></p> <p>Give the device a name and press Continue. You should see the new device in the devices list on the left side of the app.</p> <p></p> <p>Repeat this process for every key that will be in your multisig wallet.</p> <p>Once all key devices have been added, you can make a wallet using them. Press the Add new wallet button on the left side of the app.</p> <p></p> <p>Choose to create a Multisignature wallet when it asks which type of wallet you want on the following screen.</p> <p></p> <p>Select the devices you just added and press Continue.</p> <p></p> <p>Give your wallet a name, make sure to select Segwit for the wallet type, and decide how many of your keys are required to sign a transaction, then press Create wallet.</p> <p></p> <p>Congrats, you just created a multisig wallet!</p>"},{"location":"getting-started/usage/using-a-multisig-wallet/#load-the-wallet-into-krux","title":"Load the wallet into Krux","text":"<p>Load the wallet into Krux by going to the Settings page in Specter Desktop, then click the Export tab. There, press the Export button to display a QR code of your wallet.</p> <p></p> <p>In Krux, select the Wallet Descriptor menu item option and scan the QR code.</p> <p> </p> <p>If it worked, Krux should display the wallet information that it loaded:</p> <p> </p>"},{"location":"getting-started/usage/using-a-multisig-wallet/#receive-coins","title":"Receive coins","text":"<p>The Receive screen should show your first receive address that you can send funds to.</p> <p></p>"},{"location":"getting-started/usage/using-a-multisig-wallet/#send-coins","title":"Send coins","text":"<p>Go to Send in Specter Desktop, fill in the recipient address, amount, and any extra information you wish to supply, and click Create unsigned transaction.</p> <p></p> <p>You will now see a screen listing the devices in your wallet. Select the device you want to sign the transaction (PSBT) with.</p> <p>Specter Desktop will display an animated QR code of the PSBT that you can scan with Krux by going to Sign &gt; PSBT in its main menu. After scanning, Krux should display info about the transaction for you to confirm before signing.</p> <p> </p> <p>Once you have confirmed, Krux will begin animating a QR code of the signed transaction that you can scan into Specter Desktop. </p> <p> </p> <p>In Specter Desktop, click Scan signed transaction and show it the QR. Each part of the QR code that is read will receive a ghost icon to indicate progress.</p> <p></p> <p>Once all parts of the QR code have been read, you should see a checkmark next to your device indicating its signature was added.</p> <p>Repeat this process for the remaining keys in your wallet until you have a quorum of signatures. </p> <p>After the final signature, a window will popup asking you to broadcast the transaction. Click Send transaction and your transaction should be broadcasted to the network!</p> <p></p> <p>Congratulations, you have learned how to send a transaction using Specter Desktop \ud83c\udf89</p>"},{"location":"getting-started/usage/using-a-multisig-wallet/#sparrow","title":"Sparrow","text":""},{"location":"getting-started/usage/using-a-multisig-wallet/#create-the-wallet_1","title":"Create the wallet","text":"<p>In Sparrow, create a new wallet by going to File &gt; New Wallet and give it a name.</p> <p></p> <p>On the wallet screen, make sure to select a Multi Signature policy type with the Native Segwit (P2WSH) script type. Here you can decide how many keys will be in your multisig and how many should be required to sign a transaction.</p> <p></p> <p>Now, you will need to import your public key. To do so, press the Airgapped Hardware Wallet button under Keystores section. On the screen that pops up, look for Krux option and click its  Scan... button.</p> <p></p> <p></p> <p>On your Krux device, navigate to the Extended Public Key option in the main menu and click on XPUB - QR Code  and show it to Sparrow.</p> <p> </p> <p>It should import the xpub and show a key tab under Keystores section:</p> <p></p> <p>Repeat this process for every key that will be in your multisig wallet.</p> <p>Once all keys have been added, click the blue Apply button to create your wallet.</p> <p>Congrats, you just created a multisig wallet!</p>"},{"location":"getting-started/usage/using-a-multisig-wallet/#load-the-wallet-output-descriptor-into-krux","title":"Load the wallet output descriptor into Krux","text":"<p>Load the wallet output descriptor into Krux by going to the Settings screen of the wallet in Sparrow, then click the  (QR code symbol) button at Script Policy section to the right of the Descriptor: to display a QR code that you can scan with Krux.</p> <p></p> <p>In Krux, select the Wallet menu item option and scan the QR code.</p> <p> </p> <p>If it worked, Krux should display the wallet information that it loaded:</p> <p> </p>"},{"location":"getting-started/usage/using-a-multisig-wallet/#receive-coins_1","title":"Receive coins","text":"<p>Navigate to the Receive screen where you should see your first receive address that you can send funds to.</p> <p></p>"},{"location":"getting-started/usage/using-a-multisig-wallet/#send-coins_1","title":"Send coins","text":"<p>Go to the Send screen, fill in the recipient address, amount, and any extra information you wish to supply, and click the blue Create Transaction button.</p> <p></p> <p>On the next screen, make sure that the Signing Wallet is the one you created and that the Sighash is set to All. Click the blue Finalize Transaction for Signing button.</p> <p></p> <p>On the next screen, click Show QR to make Sparrow display an animated QR code of the PSBT that you can scan with Krux by going to Sign &gt; PSBT &gt; Load from camera in its main menu.</p> <p></p> <p>After scanning, Krux should display info about the transaction for you to confirm before signing.</p> <p> </p> <p>Once you have confirmed, Krux will begin animating a QR code of the signed transaction that you can scan into Sparrow. </p> <p> </p> <p>In Sparrow, click Scan QR and show it the QR. A progress bar will indicate how many parts of the QR have been read.</p> <p>Once all parts of the QR code have been read, you should see the signature bar partially fill indicating the signature was added.</p> <p>Repeat this process for the remaining keys in your wallet until you have a quorum of signatures. </p> <p>After the final signature, the bar will fill and two new buttons appear.  Click the blue Broadcast Transaction button and your transaction should be broadcasted to the network!</p> <p></p> <p>Congratulations, you have learned how to send a transaction using Sparrow \ud83c\udf89</p>"},{"location":"getting-started/usage/using-a-multisig-wallet/#bluewallet","title":"BlueWallet","text":""},{"location":"getting-started/usage/using-a-multisig-wallet/#create-the-wallet_2","title":"Create the wallet","text":"<p>In BlueWallet, create a new wallet by either pressing the + button or scrolling to the right until you see the Add now button.</p> <p></p> <p>On the screen that pops up, add a name for your wallet, tap on Vault, and tap Create to begin creating a multisig wallet. </p> <p></p> <p>On the following screen, you can proceed with the defaults or adjust the number of cosigners (default is 2-of-3) as needed by going into the Vault Settings. Make sure to leave the script type as <code>p2wsh</code>. </p> <p></p> <p></p> <p>Continue and you will be taken to a screen where you can import your keys.</p> <p>Tap Import under the first Vault Key.</p> <p></p> <p>Tap again on Scan or import a file to begin scanning a QR code.</p> <p>On your Krux, navigate to the Extended Public Key option under the main menu and show the first QR code to BlueWallet.</p> <p> </p> <p>You should see a green checkmark next to the key if successful.</p> <p></p> <p>Repeat this process for every key that will be in your multisig wallet.</p> <p>Once all keys have been added, tap Create.</p> <p></p> <p>From here, you can send or receive.</p> <p></p> <p>Congrats, you just created a multisig wallet!</p>"},{"location":"getting-started/usage/using-a-multisig-wallet/#load-the-wallet-into-krux_1","title":"Load the wallet into Krux","text":"<p>Load the wallet into Krux by tapping the ellipsis in the top-right to see the wallet settings.</p> <p></p> <p>From here, tap Export Coordination Setup in order to display a QR code of your wallet.</p> <p></p> <p>In Krux, select the Wallet Descriptor menu item option and scan the QR code.</p> <p> </p> <p>If it worked, Krux should display the wallet information that it loaded:</p> <p> </p>"},{"location":"getting-started/usage/using-a-multisig-wallet/#receive-coins_2","title":"Receive coins","text":"<p>Navigate to the Receive screen where you should see your first receive address that you can send funds to.</p> <p></p>"},{"location":"getting-started/usage/using-a-multisig-wallet/#send-coins_2","title":"Send coins","text":"<p>Go to the Send screen, fill in the recipient address, amount, and any extra information you wish to supply, and tap Next.</p> <p></p> <p>You should see an animated QR code of the PSBT that you can scan with Krux by going to Sign &gt; PSBT in its main menu.</p> <p>After scanning, Krux should display info about the transaction for you to confirm before signing.</p> <p> </p> <p>Once you have confirmed, Krux will begin animating a QR code of the signed transaction that you can scan into BlueWallet. </p> <p> </p> <p>Once all parts of the QR code have been read, you can then choose to broadcast the transaction, sending it to the network!</p> <p>Congratulations, you have learned how to send a transaction using BlueWallet \ud83c\udf89</p>"},{"location":"getting-started/usage/using-a-single-sig-wallet/","title":"Using a Single-sig Wallet","text":"<p>This guide assumes you have already created a mnemonic. If that is not the case, head over to the Generating a Mnemonic page and complete those steps first.</p> <p>When entering your mnemonic into Krux, make sure to select <code>Single-sig</code> before proceeding. The choice of <code>Single-sig</code> vs. <code>Multisig</code> at this point will change the derivation path used to generate your master extended public key (xpub) which will affect how wallet software handles it.</p> <p> </p> <p>Selecting <code>Single-sig</code> will derive an xpub using the derivation path <code>m/84'/0'/0'</code> on mainnet and <code>m/84'/1'/0'</code> on testnet, which indicates to wallet software that a Segregated Witness (Segwit) script type should be used. For single-sig wallets, this script is <code>P2WPKH</code>, or just <code>wpkh</code>.</p> <p>Note: The load of the <code>Wallet Descriptor</code> step is unnecessary for signing PSBTs with Single-sig wallets since the script type (<code>wpkh</code>) and key are already known. However, this can be useful if you wish to print a backup of the wallet or want an additional sanity check.</p>"},{"location":"getting-started/usage/using-a-single-sig-wallet/#specter-desktop","title":"Specter Desktop","text":""},{"location":"getting-started/usage/using-a-single-sig-wallet/#create-the-wallet","title":"Create the wallet","text":"<p>In Specter Desktop, you will need to import your public key by adding a new device. Press the Add new device button on the left side of the app.</p> <p></p> <p>Krux is not listed as one of the available device types on the Add Device screen, so you will need to select the Other option.</p> <p></p> <p>You will be taken to the Upload Keys screen where you can choose to Scan QR code.</p> <p></p> <p>On your Krux, navigate to the Extended Public Key option under the main menu and show the first QR code to Specter Desktop.</p> <p> </p> <p>It should import the xpub and display the Purpose as #0 Single Sig (Segwit).</p> <p></p> <p>Give the device a name and press Continue. You should see the new device in the devices list on the left side of the app.</p> <p></p> <p>After you've added a device with your key to Specter Desktop, you can make a wallet using it. Press the Add new wallet button on the left side of the app.</p> <p></p> <p>Choose to create a Single key wallet when it asks which type of wallet you want on the following screen.</p> <p></p> <p>Select the device you just added.</p> <p></p> <p>Give your wallet a name and make sure to select Segwit for the wallet type, then press Create wallet.</p> <p></p> <p>Congrats, you just created a single-sig wallet with your key!</p>"},{"location":"getting-started/usage/using-a-single-sig-wallet/#load-the-wallet-into-krux","title":"Load the wallet into Krux","text":"<p>Load the wallet into Krux by going to the Settings page in Specter Desktop, then click the Export tab. There, press the Export button to display a QR code of your wallet.</p> <p></p> <p>In Krux, select the Wallet Descriptor menu item option and scan the QR code.</p> <p> </p> <p>If it worked, Krux should display the wallet information that it loaded:</p> <p> </p>"},{"location":"getting-started/usage/using-a-single-sig-wallet/#receive-coins","title":"Receive coins","text":"<p>Navigate to the Receive screen where you should see a receive address that you can send funds to.</p> <p></p>"},{"location":"getting-started/usage/using-a-single-sig-wallet/#send-coins","title":"Send coins","text":"<p>Go to Send in Specter Desktop, fill in the recipient address, amount, and any extra information you wish to supply, and click Create unsigned transaction.</p> <p></p> <p>You will now see a screen listing the devices in your wallet. Select the device you want to sign the transaction (PSBT) with.</p> <p>Specter Desktop will display an animated QR code of the PSBT that you can scan with Krux by going to Sign &gt; PSBT in its main menu. After scanning, Krux should display info about the transaction for you to confirm before signing.</p> <p> </p> <p>Once you have confirmed, Krux will begin animating a QR code of the signed transaction that you can scan into Specter Desktop. </p> <p> </p> <p>In Specter Desktop, click Scan signed transaction and show it the QR. Each part of the QR code that is read will receive a ghost icon to indicate progress.</p> <p></p> <p>Once all parts of the QR code have been read, you should see a window popup asking you to broadcast the transaction. Click Send transaction and your transaction should be broadcasted to the network!</p> <p></p> <p>Congratulations, you have learned how to send a transaction using Specter Desktop \ud83c\udf89</p>"},{"location":"getting-started/usage/using-a-single-sig-wallet/#sparrow","title":"Sparrow","text":""},{"location":"getting-started/usage/using-a-single-sig-wallet/#create-the-wallet_1","title":"Create the wallet","text":"<p>In Sparrow, create a new wallet by going to File &gt; New Wallet and give it a name.</p> <p></p> <p>On the wallet screen, make sure to select a Single Signature policy type with the Native Segwit (P2WPKH) script type.</p> <p></p> <p>Now, you will need to import your public key. To do so, press the Airgapped Hardware Wallet button under Keystores section. On the screen that pops up, look for Krux option and click its  Scan... button.</p> <p></p> <p></p> <p>On your Krux device, navigate to the Extended Public Key option in the main menu and click on XPUB - QR Code  and show it to Sparrow.</p> <p> </p> <p>It should import the xpub and show a key tab under Keystores section:</p> <p></p> <p>If everything looks right, click the blue Apply button to create your wallet.</p> <p>Congrats, you just created a single-sig wallet with your key!</p>"},{"location":"getting-started/usage/using-a-single-sig-wallet/#load-the-wallet-output-descriptor-into-krux-optional","title":"Load the wallet output descriptor into Krux (optional)","text":"<p>Single-sig wallets don't need to perform this step, it is optional! Load the wallet output descriptor into Krux by going to the Settings screen of the wallet in Sparrow, then click the  (QR code symbol) button at Script Policy section to the right of the Descriptor: to display a QR code that you can scan with Krux.</p> <p></p> <p>In Krux, select the Wallet menu item option and scan the QR code.</p> <p> </p> <p>If it worked, Krux should display the wallet information that it loaded:</p> <p> </p>"},{"location":"getting-started/usage/using-a-single-sig-wallet/#receive-coins_1","title":"Receive coins","text":"<p>Navigate to the Receive screen where you should see a receive address that you can send funds to.</p> <p></p>"},{"location":"getting-started/usage/using-a-single-sig-wallet/#send-coins_1","title":"Send coins","text":"<p>Go to the Send screen, fill in the recipient address, amount, and any extra information you wish to supply, and click the blue Create Transaction button.</p> <p></p> <p>On the next screen, make sure that the Signing Wallet is the one you created and that the Sighash is set to All. Click the blue Finalize Transaction for Signing button.</p> <p></p> <p>On the next screen, click Show QR to make Sparrow display an animated QR code of the PSBT that you can scan with Krux by going to Sign &gt; PSBT &gt; Load from camera in its main menu.</p> <p></p> <p>After scanning, Krux should display info about the transaction for you to confirm before signing.</p> <p> </p> <p>Once you have confirmed, Krux will begin animating a QR code of the signed transaction that you can scan into Sparrow. </p> <p> </p> <p>In Sparrow, click Scan QR and show it the QR. A progress bar will indicate how many parts of the QR have been read.</p> <p>Once all parts of the QR code have been read, you should see the signature bar fill and two new buttons appear.  Click the blue Broadcast Transaction button and your transaction should be broadcasted to the network!</p> <p></p> <p>Congratulations, you have learned how to send a transaction using Sparrow \ud83c\udf89</p>"},{"location":"getting-started/usage/using-a-single-sig-wallet/#bluewallet","title":"BlueWallet","text":""},{"location":"getting-started/usage/using-a-single-sig-wallet/#create-the-wallet_2","title":"Create the wallet","text":"<p>In BlueWallet, create a new wallet by either pressing the + button or scrolling to the right until you see the Add now button.</p> <p></p> <p>On the screen that pops up, tap Import wallet to import your public key. </p> <p></p> <p>On the following screen, tap Scan or import a file and it will begin trying to scan a QR code. </p> <p></p> <p>On your Krux, navigate to the Extended Public Key option under the main menu and make sure to show the second, zpub QR code to BlueWallet.</p> <p> </p> <p>It should import the key and create a watch-only wallet. From here, you can send or receive.</p> <p></p> <p>Congrats, you just created a single-sig wallet with your key!</p>"},{"location":"getting-started/usage/using-a-single-sig-wallet/#load-the-wallet-into-krux_1","title":"Load the wallet into Krux","text":"<p>Load the wallet into Krux by tapping the ellipsis in the top-right to see the wallet settings.</p> <p></p> <p>From here, tap Export/Backup in order to display a QR code of your wallet.</p> <p></p> <p>In Krux, select the Wallet Descriptor menu item option and scan the QR code.</p> <p> </p> <p>If it worked, Krux should display the wallet information that it loaded:</p> <p> </p>"},{"location":"getting-started/usage/using-a-single-sig-wallet/#receive-coins_2","title":"Receive coins","text":"<p>Navigate to the Receive screen where you should see a receive address that you can send funds to.</p> <p></p> <p>Note that you can verify the receive address belongs to your wallet by using the Scan Address option.</p>"},{"location":"getting-started/usage/using-a-single-sig-wallet/#send-coins_2","title":"Send coins","text":"<p>Go to the Send screen, fill in the recipient address, amount, and any extra information you wish to supply, and tap Next.</p> <p></p> <p>You should see an animated QR code of the PSBT that you can scan with Krux by going to Sign &gt; PSBT in its main menu.</p> <p>After scanning, Krux should display info about the transaction for you to confirm before signing.</p> <p> </p> <p>Once you have confirmed, Krux will begin animating a QR code of the signed transaction that you can scan into BlueWallet. </p> <p> </p> <p>Once all parts of the QR code have been read, you can then choose to broadcast the transaction, sending it to the network!</p> <p>Congratulations, you have learned how to send a transaction using BlueWallet \ud83c\udf89</p>"},{"location":"snippets/12th-24th-word-generate/","title":"12th 24th word generate","text":"<p>On your 12th or 24th word, you can leave it blank to have Krux generate the final checksum word of your mnemonic for you. This is useful when you choose a manual method to generate your mnemonic and want the final BIP-39 checksum word to be valid.</p>"},{"location":"snippets/amigo-more-info-faq/","title":"Amigo more info faq","text":""},{"location":"snippets/amigo-more-info-faq/#a-note-about-the-maix-amigo","title":"A note about the Maix Amigo","text":"<p>Some Amigo screens have inverted X coordinates, others display colors differently. For more info see FAQ</p>"},{"location":"snippets/flash-krux-logo/","title":"Flash krux logo","text":"<p>When the flashing process completes, you should see the Krux logo:</p> <p> </p> <p>If after 30 seconds you still see a black screen, try power cycling the device by holding down the power button for six seconds.</p> <p>Congrats, you're now running Krux!</p>"},{"location":"snippets/m5stickv-usb-c/","title":"M5stickv usb c","text":"<p>M5stickV's USB-C port lacks pull up resistors required for it to be recognized and powered by host (computer) USB-C ports. If you don't have an USB-A available, you can use a USB hub connected between your computer's USB-C and M5stickV.</p>"},{"location":"snippets/sd-card-info-faq/","title":"Sd card info faq","text":"<p>We cannot guarantee that a microSD card is compatible and will work in your device; you'll need to test it on the device to be sure, read the FAQ for more info.</p>"},{"location":"snippets/single-multi-wallet-descriptor/","title":"Single multi wallet descriptor","text":"<p>In Krux, select the Wallet Descriptor menu item option and scan the QR code.</p> <p> </p> <p>If it worked, Krux should display the wallet information that it loaded:</p>"},{"location":"snippets/sparrow/broadcast-sparrow/","title":"Broadcast sparrow","text":"<p>Click the blue Broadcast Transaction button and your transaction should be broadcasted to the network!</p> <p></p> <p>Congratulations, you have learned how to send a transaction using Sparrow \ud83c\udf89</p>"},{"location":"snippets/sparrow/import-xpub-sparrow/","title":"Import xpub sparrow","text":"<p>Now, you will need to import your public key. To do so, press the Airgapped Hardware Wallet button under Keystores section. On the screen that pops up, look for Krux option and click its  Scan... button.</p> <p></p> <p></p> <p>On your Krux device, navigate to the Extended Public Key option in the main menu and click on XPUB - QR Code  and show it to Sparrow.</p> <p> </p> <p>It should import the xpub and show a key tab under Keystores section:</p>"},{"location":"snippets/sparrow/load-wallet-output-sparrow/","title":"Load wallet output sparrow","text":"<p>In Krux, select the Wallet menu item option and scan the QR code.</p> <p> </p> <p>If it worked, Krux should display the wallet information that it loaded:</p>"},{"location":"snippets/sparrow/send-coins-sparrow/","title":"Send coins sparrow","text":""},{"location":"snippets/sparrow/send-coins-sparrow/#send-coins","title":"Send coins","text":"<p>Go to the Send screen, fill in the recipient address, amount, and any extra information you wish to supply, and click the blue Create Transaction button.</p> <p></p> <p>On the next screen, make sure that the Signing Wallet is the one you created and that the Sighash is set to All. Click the blue Finalize Transaction for Signing button.</p> <p></p> <p>On the next screen, click Show QR to make Sparrow display an animated QR code of the PSBT that you can scan with Krux by going to Sign &gt; PSBT &gt; Load from camera in its main menu.</p> <p></p> <p>After scanning, Krux should display info about the transaction for you to confirm before signing.</p> <p> </p> <p>Once you have confirmed, Krux will begin animating a QR code of the signed transaction that you can scan into Sparrow. </p> <p> </p> <p>In Sparrow, click Scan QR and show it the QR. A progress bar will indicate how many parts of the QR have been read.</p>"}]}