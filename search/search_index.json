{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"encrypted-qr-codes/","text":"Introduction \u00b6 There are many possible security layers one could add to protect a wallet\u2019s private key, adding a passphrase to the mnemonic is the most common. To encrypt a mnemonic would have similar use case as the passphrase, but, depending on how it is done, the user experience could be different. The main difference from passphrases to Krux\u2019s encrypted mnemonic implementation is that when users type the wrong key, instead of loading a different wallet, encrypted mnemonic QR codes will return an error. This is not considered an advantage, but a difference, that may be desired or not. The implementation also has the convenience of storing a mnemonic ID on the QR code. Mnemonic encryption, with its own key, can be used together with passphrases as an extra security layer. QR Data and Parsing \u00b6 In search of efficiency and smaller QR codes, all data is converted to bytes and organized like a Bitcoin transaction, with variable and fixed length fields. The following data is present on the QR code: ID length ID Version Key Derivations IV Encrypted Mnemonic Validation Block 1 Byte Variable 1 Byte 3 Bytes 16 Bytes (optional) 16 Bytes (12 words) 32 Bytes (24 words) 16 Bytes Public: \u00b6 (1) - Mnemonic ID length (1 Byte). (2) - Mnemonic ID(variable lenght): Custom ID or wallet fingerprint. (3) - Version(1 Byte): Version of encryption method, currently two are available: 0: AES-ECB-PBKDF2: Electronic Codebook with PBKDF2 key derivation. 1: AES-CBC-PBKDF2: Cypher Block Chaining with PBKDF2 key derivation. (4) - Key derivation iterations(3 Bytes): Number of PBKDF2 key derivations times 10,000. Cipher: \u00b6 (5) - IV(16 Bytes-optional): Initial vector for AES-CBC encryption, possibility to be nonce for future AES-CTR or other encryption methods. (6) - Encrypted Mnemonic(16 Bytes - 12 words, 32 Bytes - 24 words): Mnemonic ciphertext. (7) - Validation block(16 Bytes): Currently using first 16 bytes of sha256 of the mnemonic bytes as checksum, could be used in future to store AES-AEX validation tag.","title":"Encrypted QRCodes"},{"location":"encrypted-qr-codes/#introduction","text":"There are many possible security layers one could add to protect a wallet\u2019s private key, adding a passphrase to the mnemonic is the most common. To encrypt a mnemonic would have similar use case as the passphrase, but, depending on how it is done, the user experience could be different. The main difference from passphrases to Krux\u2019s encrypted mnemonic implementation is that when users type the wrong key, instead of loading a different wallet, encrypted mnemonic QR codes will return an error. This is not considered an advantage, but a difference, that may be desired or not. The implementation also has the convenience of storing a mnemonic ID on the QR code. Mnemonic encryption, with its own key, can be used together with passphrases as an extra security layer.","title":"Introduction"},{"location":"encrypted-qr-codes/#qr-data-and-parsing","text":"In search of efficiency and smaller QR codes, all data is converted to bytes and organized like a Bitcoin transaction, with variable and fixed length fields. The following data is present on the QR code: ID length ID Version Key Derivations IV Encrypted Mnemonic Validation Block 1 Byte Variable 1 Byte 3 Bytes 16 Bytes (optional) 16 Bytes (12 words) 32 Bytes (24 words) 16 Bytes","title":"QR Data and Parsing"},{"location":"encrypted-qr-codes/#public","text":"(1) - Mnemonic ID length (1 Byte). (2) - Mnemonic ID(variable lenght): Custom ID or wallet fingerprint. (3) - Version(1 Byte): Version of encryption method, currently two are available: 0: AES-ECB-PBKDF2: Electronic Codebook with PBKDF2 key derivation. 1: AES-CBC-PBKDF2: Cypher Block Chaining with PBKDF2 key derivation. (4) - Key derivation iterations(3 Bytes): Number of PBKDF2 key derivations times 10,000.","title":"Public:"},{"location":"encrypted-qr-codes/#cipher","text":"(5) - IV(16 Bytes-optional): Initial vector for AES-CBC encryption, possibility to be nonce for future AES-CTR or other encryption methods. (6) - Encrypted Mnemonic(16 Bytes - 12 words, 32 Bytes - 24 words): Mnemonic ciphertext. (7) - Validation block(16 Bytes): Currently using first 16 bytes of sha256 of the mnemonic bytes as checksum, could be used in future to store AES-AEX validation tag.","title":"Cipher:"},{"location":"faq/","text":"Why does Krux show an xpub for a segwit address? \u00b6 The xpub that Krux displays follows the bitcoin core descriptors spec and includes key origin and derivation info that, in theory, makes zpubs (and ypubs) unnecessary if the wallet software being shown this extra information can parse it . From the spec: Every public key can be prefixed by an 8-character hexadecimal fingerprint plus optional derivation steps (hardened and unhardened) surrounded by brackets, identifying the master and derivation path the key or xpub that follows was derived with. However, in practice not all wallet software supports this extended format, so Krux still provides a zpub as a fallback. For more information, check out https://outputdescriptors.org/ . Why am I unable to sign a PSBT from BlueWallet? \u00b6 As mentioned above, some wallet software does not support the descriptor key expression format. In this case, BlueWallet will ignore the key origin and derivation info when importing the xpub to create a single-sig wallet. This will result in the wrong derivation being used in BlueWallet and thus the inability to sign an outbound transaction in Krux. Currently, the way to properly create a single-sig wallet in BlueWallet is to export the second QR code that Krux displays which contains the zpub. BlueWallet can then correctly infer the derivation path when creating the wallet. Why isn't Krux scanning my QR code? \u00b6 The level of detail that you see is what Krux sees. If the QR code shown on the device's screen is blurry, the camera lens of the device may be out of focus. It can be adjusted by rotating it (with your fingertip) clockwise or counter-clockwise to achieve a clearer result. If you have adjusted the lens already, the device may be too far away or too close to the code to read it. Start by holding the device as close to the QR code as possible and pulling away slowly until all or most of the QR code is viewable within the screen. If the code on the screen looks crisp, Krux should read it quickly and give you immediate feedback. If you are in a dark environment, you can hold down the ENTER button of the M5StickV or Maix Amigo to turn on their LED light to potentially increase visibility. Why am I getting an error when I try to scan a QR code? \u00b6 If Krux is recognizing that it sees a QR code but is displaying an error message after reading it, the likely reason is that the QR code is not in a format that Krux understands. For mnemonics, Krux recognizes: BIP-39 Plaintext (Used by Krux and https://iancoleman.io/bip39/ ) SeedSigner SeedQR and CompactSeedQR Formats UR Type crypto-bip39 For loading wallets, Krux recognizes: JSON with at least a descriptor key containing an output descriptor string Key-value INI files with at least Format , Policy , and Derivation keys UR Type crypto-output For PSBTs, Krux recognizes: Base43, Base58, and Base64-encoded bytes Raw Bytes UR Type crypto-psbt Additionally, Krux recognizes animated QR codes that use either the plaintext pMofN or binary UR encodings. Why can't my computer read the QR code that Krux displays? \u00b6 If you are using an M5StickV, the small screen makes it difficult for laptop webcams to capture enough detail to parse the QR codes it displays. In the future, more work will be done to support displaying lower density QR codes. For now, a workaround you can do is to take a picture or video of the QR code with a better-quality camera (such as your phone), then enlarge and display the photo or video to your webcam. Alternatively, it may be simpler to use a mobile wallet such as BlueWallet with the M5StickV since phone cameras don't seem to have issues reading the small QR codes. Why won't my (Linux) OS list a serial port after connecting my device? \u00b6 If you get the following error when trying to flash your device: Failed to find device via USB. Is it connected and powered on? Make sure your device is being detected and serial ports are being mounted by running: ls /dev/ttyUSB* Expect one port to be listed for devices like M5stickV and Dock /dev/ttyUSB0 , and two ports for Amigo and Bit /dev/ttyUSB0 /dev/ttyUSB1 . If you don't see them, your OS may not be loading the correct drivers to create the serial ports to connect to. Ubuntu has a known bug where the brltty driver \"kidnaps\" serial devices. You can solve this problem by removing it: sudo apt-get remove brltty If you are using an Amigo, make sure you\u2019re using bottom USB-C port, not the one on the left side. Why are the buttons on my Amigo in the wrong order? \u00b6 Some Amigo screens have inverted x coordinates while others don\u2019t. If after flashing maixpy_amigo_tft to your device you notice that the buttons on keypad input screens appear to be in the wrong order, please try flashing maixpy_amigo_ips instead (or vice versa) which should correct the issue. Why isn't Krux detecting my microSD card? \u00b6 Why does the option to save to SD not appear? \u00b6 First, make sure you are using a supported microSD card . We hope to add support for more cards in the future. Second, make sure that Krux is powered off when you insert your microSD into the device. The firmware does not have support for hot plugging and can only detect the card on boot.","title":"FAQ"},{"location":"faq/#why-does-krux-show-an-xpub-for-a-segwit-address","text":"The xpub that Krux displays follows the bitcoin core descriptors spec and includes key origin and derivation info that, in theory, makes zpubs (and ypubs) unnecessary if the wallet software being shown this extra information can parse it . From the spec: Every public key can be prefixed by an 8-character hexadecimal fingerprint plus optional derivation steps (hardened and unhardened) surrounded by brackets, identifying the master and derivation path the key or xpub that follows was derived with. However, in practice not all wallet software supports this extended format, so Krux still provides a zpub as a fallback. For more information, check out https://outputdescriptors.org/ .","title":"Why does Krux show an xpub for a segwit address?"},{"location":"faq/#why-am-i-unable-to-sign-a-psbt-from-bluewallet","text":"As mentioned above, some wallet software does not support the descriptor key expression format. In this case, BlueWallet will ignore the key origin and derivation info when importing the xpub to create a single-sig wallet. This will result in the wrong derivation being used in BlueWallet and thus the inability to sign an outbound transaction in Krux. Currently, the way to properly create a single-sig wallet in BlueWallet is to export the second QR code that Krux displays which contains the zpub. BlueWallet can then correctly infer the derivation path when creating the wallet.","title":"Why am I unable to sign a PSBT from BlueWallet?"},{"location":"faq/#why-isnt-krux-scanning-my-qr-code","text":"The level of detail that you see is what Krux sees. If the QR code shown on the device's screen is blurry, the camera lens of the device may be out of focus. It can be adjusted by rotating it (with your fingertip) clockwise or counter-clockwise to achieve a clearer result. If you have adjusted the lens already, the device may be too far away or too close to the code to read it. Start by holding the device as close to the QR code as possible and pulling away slowly until all or most of the QR code is viewable within the screen. If the code on the screen looks crisp, Krux should read it quickly and give you immediate feedback. If you are in a dark environment, you can hold down the ENTER button of the M5StickV or Maix Amigo to turn on their LED light to potentially increase visibility.","title":"Why isn't Krux scanning my QR code?"},{"location":"faq/#why-am-i-getting-an-error-when-i-try-to-scan-a-qr-code","text":"If Krux is recognizing that it sees a QR code but is displaying an error message after reading it, the likely reason is that the QR code is not in a format that Krux understands. For mnemonics, Krux recognizes: BIP-39 Plaintext (Used by Krux and https://iancoleman.io/bip39/ ) SeedSigner SeedQR and CompactSeedQR Formats UR Type crypto-bip39 For loading wallets, Krux recognizes: JSON with at least a descriptor key containing an output descriptor string Key-value INI files with at least Format , Policy , and Derivation keys UR Type crypto-output For PSBTs, Krux recognizes: Base43, Base58, and Base64-encoded bytes Raw Bytes UR Type crypto-psbt Additionally, Krux recognizes animated QR codes that use either the plaintext pMofN or binary UR encodings.","title":"Why am I getting an error when I try to scan a QR code?"},{"location":"faq/#why-cant-my-computer-read-the-qr-code-that-krux-displays","text":"If you are using an M5StickV, the small screen makes it difficult for laptop webcams to capture enough detail to parse the QR codes it displays. In the future, more work will be done to support displaying lower density QR codes. For now, a workaround you can do is to take a picture or video of the QR code with a better-quality camera (such as your phone), then enlarge and display the photo or video to your webcam. Alternatively, it may be simpler to use a mobile wallet such as BlueWallet with the M5StickV since phone cameras don't seem to have issues reading the small QR codes.","title":"Why can't my computer read the QR code that Krux displays?"},{"location":"faq/#why-wont-my-linux-os-list-a-serial-port-after-connecting-my-device","text":"If you get the following error when trying to flash your device: Failed to find device via USB. Is it connected and powered on? Make sure your device is being detected and serial ports are being mounted by running: ls /dev/ttyUSB* Expect one port to be listed for devices like M5stickV and Dock /dev/ttyUSB0 , and two ports for Amigo and Bit /dev/ttyUSB0 /dev/ttyUSB1 . If you don't see them, your OS may not be loading the correct drivers to create the serial ports to connect to. Ubuntu has a known bug where the brltty driver \"kidnaps\" serial devices. You can solve this problem by removing it: sudo apt-get remove brltty If you are using an Amigo, make sure you\u2019re using bottom USB-C port, not the one on the left side.","title":"Why won't my (Linux) OS list a serial port after connecting my device?"},{"location":"faq/#why-are-the-buttons-on-my-amigo-in-the-wrong-order","text":"Some Amigo screens have inverted x coordinates while others don\u2019t. If after flashing maixpy_amigo_tft to your device you notice that the buttons on keypad input screens appear to be in the wrong order, please try flashing maixpy_amigo_ips instead (or vice versa) which should correct the issue.","title":"Why are the buttons on my Amigo in the wrong order?"},{"location":"faq/#why-isnt-krux-detecting-my-microsd-card","text":"","title":"Why isn't Krux detecting my microSD card?"},{"location":"faq/#why-does-the-option-to-save-to-sd-not-appear","text":"First, make sure you are using a supported microSD card . We hope to add support for more cards in the future. Second, make sure that Krux is powered off when you insert your microSD into the device. The firmware does not have support for hot plugging and can only detect the card on boot.","title":"Why does the option to save to SD not appear?"},{"location":"","text":"Krux \u00b6 Krux is open-source firmware that enables anyone to build their own Bitcoin signing device via off-the-shelf parts. It runs on Kendryte K210 devices such as the M5StickV and Maix Amigo , converting them into airgapped devices that can sign transactions for multisignature and single-signature wallets. You can even attach a thermal printer and print out the QR codes that it generates. To learn more about how Krux works, check out Getting Started .","title":"Home"},{"location":"#krux","text":"Krux is open-source firmware that enables anyone to build their own Bitcoin signing device via off-the-shelf parts. It runs on Kendryte K210 devices such as the M5StickV and Maix Amigo , converting them into airgapped devices that can sign transactions for multisignature and single-signature wallets. You can even attach a thermal printer and print out the QR codes that it generates. To learn more about how Krux works, check out Getting Started .","title":"Krux"},{"location":"parts/","text":"Krux compatible devices comparative table \u00b6 Device M5stickV Maix Amigo Maix Dock Maix Bit Price US$50 US$47-63 US$35 US$35 Screen size 1.14\" 3.5\" 2.4\" 2.4\" Screen resolution 135*240 320*480 240*320 240*320 Touchscreen Capacitive Camera OV7740 OV7740 rear GC0328 front GC0328 OV2640 or OV5642 Battery 200mAh 520mAh Requirements Rotary encoder 3D printed case Soldering Assembly Buttons 3D printed case Soldering Assembly Warnings *1 *1: Some shops ship Maix Dock with soldered pin headers that do not fit in 3D printed enclosure All devices feature Kendryte K210 chip: 28nm process, dual-core RISC-V 64bit @400MHz, 8 MB high-speed SRAM, DVP camera and MCU LCD interface, AES Accelerator, SHA256 Accelerator, FFT Accelerator Part List \u00b6 M5StickV \u00b6 Available from many distributors, including: M5Stack Adafruit Mouser Digi-Key Lee's Electronic Cytron Pimoroni OKDO You can expect to pay around $50 for one depending on which distributor you choose. Maix Amigo \u00b6 Available from many distributors, including: Seeed Studio Mouser Electromaker Antratek Digi-Key AliExpress You can expect to pay around $70 for one depending on which distributor you choose. Maix Dock and Maix Bit \u00b6 For the DIYers, the Maix Dock and Bit are also supported but will require sourcing the parts individually and building the device yourself. Below are example implementations with instructions on how to recreate them: https://github.com/selfcustody/DockEncoderCase https://github.com/selfcustody/MaixBitCase USB-C Charge Cable \u00b6 This will be included with the M5StickV and Maix Amigo that you purchase from one of the distributors above. It will be necessary to power and charge the device and to initially flash the firmware. (Optional) MicroSD Card \u00b6 Not all microSD cards will work with the devices. Make sure to use one that has been tested and shown to work with the devices already. The size of the SD card isn't important; anything over a few megabytes will be plenty. (Optional) Thermal Printer \u00b6 Krux has the ability to print all QR codes it generates, including mnemonic, xpub, wallet backup, and signed PSBT, via a locally-connected thermal printer from Adafruit over its serial port. Any of their thermal printers will work, but the starter pack would be the easiest way to get started since it includes all the parts (except the one below) you will need to begin printing. (Optional) Conversion Cable for Thermal Printer \u00b6 To connect the printer to the device, you will need a conversion cable with a 4-pin female Grove connector on one end (to connect to the device) and 4-pin male jumpers on the other end (to connect to the printer). You can find them at one of the distributors above or from Amazon.","title":"Devices and Part List"},{"location":"parts/#krux-compatible-devices-comparative-table","text":"Device M5stickV Maix Amigo Maix Dock Maix Bit Price US$50 US$47-63 US$35 US$35 Screen size 1.14\" 3.5\" 2.4\" 2.4\" Screen resolution 135*240 320*480 240*320 240*320 Touchscreen Capacitive Camera OV7740 OV7740 rear GC0328 front GC0328 OV2640 or OV5642 Battery 200mAh 520mAh Requirements Rotary encoder 3D printed case Soldering Assembly Buttons 3D printed case Soldering Assembly Warnings *1 *1: Some shops ship Maix Dock with soldered pin headers that do not fit in 3D printed enclosure All devices feature Kendryte K210 chip: 28nm process, dual-core RISC-V 64bit @400MHz, 8 MB high-speed SRAM, DVP camera and MCU LCD interface, AES Accelerator, SHA256 Accelerator, FFT Accelerator","title":"Krux compatible devices comparative table"},{"location":"parts/#part-list","text":"","title":"Part List"},{"location":"parts/#m5stickv","text":"Available from many distributors, including: M5Stack Adafruit Mouser Digi-Key Lee's Electronic Cytron Pimoroni OKDO You can expect to pay around $50 for one depending on which distributor you choose.","title":"M5StickV"},{"location":"parts/#maix-amigo","text":"Available from many distributors, including: Seeed Studio Mouser Electromaker Antratek Digi-Key AliExpress You can expect to pay around $70 for one depending on which distributor you choose.","title":"Maix Amigo"},{"location":"parts/#maix-dock-and-maix-bit","text":"For the DIYers, the Maix Dock and Bit are also supported but will require sourcing the parts individually and building the device yourself. Below are example implementations with instructions on how to recreate them: https://github.com/selfcustody/DockEncoderCase https://github.com/selfcustody/MaixBitCase","title":"Maix Dock and Maix Bit"},{"location":"parts/#usb-c-charge-cable","text":"This will be included with the M5StickV and Maix Amigo that you purchase from one of the distributors above. It will be necessary to power and charge the device and to initially flash the firmware.","title":"USB-C Charge Cable"},{"location":"parts/#optional-microsd-card","text":"Not all microSD cards will work with the devices. Make sure to use one that has been tested and shown to work with the devices already. The size of the SD card isn't important; anything over a few megabytes will be plenty.","title":"(Optional) MicroSD Card"},{"location":"parts/#optional-thermal-printer","text":"Krux has the ability to print all QR codes it generates, including mnemonic, xpub, wallet backup, and signed PSBT, via a locally-connected thermal printer from Adafruit over its serial port. Any of their thermal printers will work, but the starter pack would be the easiest way to get started since it includes all the parts (except the one below) you will need to begin printing.","title":"(Optional) Thermal Printer"},{"location":"parts/#optional-conversion-cable-for-thermal-printer","text":"To connect the printer to the device, you will need a conversion cable with a 4-pin female Grove connector on one end (to connect to the device) and 4-pin male jumpers on the other end (to connect to the printer). You can find them at one of the distributors above or from Amazon.","title":"(Optional) Conversion Cable for Thermal Printer"},{"location":"support/","text":"Support the Project \u00b6 Ways you can help \u00b6 Development \u00b6 Audit the code, file an issue, make a pull request, or do all three. :) Documentation \u00b6 I'd like to see Krux help as many people as possible, and in order to do that it needs good documentation. If you see a better way to word something, please make a PR, no matter how small. Translation \u00b6 Krux has support for different languages. If it's missing a language or has an awkward translation, please file an issue or make a PR! Social \u00b6 I'm an engineer, not a marketer. If you like Krux, help spread the word! Thank you!","title":"Support the Project"},{"location":"support/#support-the-project","text":"","title":"Support the Project"},{"location":"support/#ways-you-can-help","text":"","title":"Ways you can help"},{"location":"support/#development","text":"Audit the code, file an issue, make a pull request, or do all three. :)","title":"Development"},{"location":"support/#documentation","text":"I'd like to see Krux help as many people as possible, and in order to do that it needs good documentation. If you see a better way to word something, please make a PR, no matter how small.","title":"Documentation"},{"location":"support/#translation","text":"Krux has support for different languages. If it's missing a language or has an awkward translation, please file an issue or make a PR!","title":"Translation"},{"location":"support/#social","text":"I'm an engineer, not a marketer. If you like Krux, help spread the word! Thank you!","title":"Social"},{"location":"getting-started/QR-transcript-tools/","text":"When you export a mnemonic, encrypted mnemonic or a generic text QR code, alternative visualization modes will be available. To change modes swipe sideways, or press Page buttons if the device doesn't have touchscreen. Standard Mode \u00b6 This mode is optimized for scanning, the raw QR code will be displayed Lines Mode \u00b6 If you are good at transcribing things like handwritten text, with this mode one QR code line will be highlighted at a time. Press Enter to highlight the next line. Zoomed Regions Mode \u00b6 QR codes will be split into regions, of 5x5 or 7x7 \"blocks\". One QR code region will be shown at a time. Press Enter to display the next region. Highlighted Regions Mode \u00b6 QR codes will be split into regions, of 5x5 or 7x7 \"blocks\". One QR code region will be highlighted at a time. Press Enter to highlight the next region. Grided Mode \u00b6 Grids will be added to a standard QR code. In a dark room, if you place a sheet of paper over the device's screen, you'll notice QR code will be visible and it will be possible to copy it directly from above. Be careful to don't damage your screen with pen and markers, use an insulating plastic tape or film to protect the device if you use this method.","title":"Transcribing QR codes"},{"location":"getting-started/QR-transcript-tools/#standard-mode","text":"This mode is optimized for scanning, the raw QR code will be displayed","title":"Standard Mode"},{"location":"getting-started/QR-transcript-tools/#lines-mode","text":"If you are good at transcribing things like handwritten text, with this mode one QR code line will be highlighted at a time. Press Enter to highlight the next line.","title":"Lines Mode"},{"location":"getting-started/QR-transcript-tools/#zoomed-regions-mode","text":"QR codes will be split into regions, of 5x5 or 7x7 \"blocks\". One QR code region will be shown at a time. Press Enter to display the next region.","title":"Zoomed Regions Mode"},{"location":"getting-started/QR-transcript-tools/#highlighted-regions-mode","text":"QR codes will be split into regions, of 5x5 or 7x7 \"blocks\". One QR code region will be highlighted at a time. Press Enter to highlight the next region.","title":"Highlighted Regions Mode"},{"location":"getting-started/QR-transcript-tools/#grided-mode","text":"Grids will be added to a standard QR code. In a dark room, if you place a sheet of paper over the device's screen, you'll notice QR code will be visible and it will be possible to copy it directly from above. Be careful to don't damage your screen with pen and markers, use an insulating plastic tape or film to protect the device if you use this method.","title":"Grided Mode"},{"location":"getting-started/generating-a-mnemonic/","text":"Krux has support for creating 12 and 24-word mnemonic seed phrases. Since true entropy is difficult to produce, especially with an embedded device, we recommend to outsource entropy generation using dice rolls, but it is also possible to use camera as a source of entropy to quickly create a mnemonic. At the start screen, once you select New Mnemonic , you will be taken to a second menu where you can choose to create a mnemonic via camera, via rolls of a D6 (standard six-sided die) or D20 (20-sided die). Camera \u00b6 (Experimental!) Choose between 12 or 24 words, then take a random picture and Krux will generate a mnemonic from the hash of the image bytes. Dice Rolls \u00b6 Via D6 \u00b6 Choose between 12 or 24 words. The entropy in a single roll of a D6 is 2.585 bits ( log 2 (6) ); therefore a minimum of a 50 rolls will be required for 128 bits of entropy, enough to generate a 12-word mnemonic. For 24 words, or an entropy of 256 bits, a minimum of 99 rolls will be required. Via D20 \u00b6 Since a D20 has more possible outcomes, the entropy is increased per roll to 4.322 bits ( log 2 (20) ). This means that only 30 rolls are necessary to create a 12-word mnemonic and 60 rolls for a 24-word mnemonic. How it works \u00b6 For dice rolls, Krux keeps track of every roll you enter and displays the cumulative string of outcomes after each roll. When you have entered your final roll, Krux will hash this string using SHA256 and output the resulting hash to the screen so that you can verify it for yourself. In the case a camera snapshot is used as source, image bytes, which contain pixels data in RGB565 format, will be hashed just like it is done with the dice rolls string. Krux then takes this hash, runs unhexlify on it to encode it as bytes, and deterministically converts it into a mnemonic according to the BIP-39 Reference Implementation . Note: For 12-word mnemonics, only the first half of the SHA256 hash is used (128 bits), while 24-word mnemonics use the full hash (256 bits). Alternatives \u00b6 See here for good methods to generate a mnemonic manually, or visit Ian Coleman's BIP-39 Tool offline or on an airgapped device to generate one automatically. It's worth noting that Ian's tool is able to take a mnemonic and generate a QR code that Krux can read in via the QR input method mentioned on the next page.","title":"Generating a Mnemonic"},{"location":"getting-started/generating-a-mnemonic/#camera","text":"(Experimental!) Choose between 12 or 24 words, then take a random picture and Krux will generate a mnemonic from the hash of the image bytes.","title":"Camera"},{"location":"getting-started/generating-a-mnemonic/#dice-rolls","text":"","title":"Dice Rolls"},{"location":"getting-started/generating-a-mnemonic/#via-d6","text":"Choose between 12 or 24 words. The entropy in a single roll of a D6 is 2.585 bits ( log 2 (6) ); therefore a minimum of a 50 rolls will be required for 128 bits of entropy, enough to generate a 12-word mnemonic. For 24 words, or an entropy of 256 bits, a minimum of 99 rolls will be required.","title":"Via D6"},{"location":"getting-started/generating-a-mnemonic/#via-d20","text":"Since a D20 has more possible outcomes, the entropy is increased per roll to 4.322 bits ( log 2 (20) ). This means that only 30 rolls are necessary to create a 12-word mnemonic and 60 rolls for a 24-word mnemonic.","title":"Via D20"},{"location":"getting-started/generating-a-mnemonic/#how-it-works","text":"For dice rolls, Krux keeps track of every roll you enter and displays the cumulative string of outcomes after each roll. When you have entered your final roll, Krux will hash this string using SHA256 and output the resulting hash to the screen so that you can verify it for yourself. In the case a camera snapshot is used as source, image bytes, which contain pixels data in RGB565 format, will be hashed just like it is done with the dice rolls string. Krux then takes this hash, runs unhexlify on it to encode it as bytes, and deterministically converts it into a mnemonic according to the BIP-39 Reference Implementation . Note: For 12-word mnemonics, only the first half of the SHA256 hash is used (128 bits), while 24-word mnemonics use the full hash (256 bits).","title":"How it works"},{"location":"getting-started/generating-a-mnemonic/#alternatives","text":"See here for good methods to generate a mnemonic manually, or visit Ian Coleman's BIP-39 Tool offline or on an airgapped device to generate one automatically. It's worth noting that Ian's tool is able to take a mnemonic and generate a QR code that Krux can read in via the QR input method mentioned on the next page.","title":"Alternatives"},{"location":"getting-started/","text":"Krux is open-source Bitcoin signing firmware for devices with the K210 chipset. Signing operations in Krux are done offline via QR code or via SD card. You can create/load your BIP-39 mnemonic, or import a wallet descriptor, and sign transactions all without having to plug the device into your computer (except to initially flash the firmware). It reads QR codes with its camera and outputs QR codes to its screen, or to paper via an optional thermal printer attachment . Krux does not come with its own desktop wallet software. Instead, you can use Krux with third-party wallet coordinators to create/manage wallets, and send transactions from your online computer or mobile device while keeping your keys offline. Krux was built to be vendor agnostic and works with many popular wallet coordinators, including: Specter Desktop Sparrow Wallet Nunchuk BlueWallet","title":"About"},{"location":"getting-started/loading-a-mnemonic/","text":"Once you have either a 12- or 24-word mnemonic, choose Load Mnemonic on Krux's start menu, and you will be presented with several input methods: Input Methods \u00b6 Via Camera \u00b6 You can choose to use the camera to scan QR codes or Tiny Seed metal plate backups QR Code \u00b6 It's unpleasant having to manually enter 12 or 24 words each time you want to use Krux. To remedy this you can instead use the device's camera to read a QR code containing the words. Krux will decode QR codes of four types: - Plain text QR, with mnemonic encoded as text, with words separated by spaces. - SeedQR word's respective BIP-39 numbers concatenated, encoded as text. - Compact SeedQR: word's bits concatenated as bytes. - Encrypted Mnemonic: word's bits encrypted, encryption ID and configuration encoded as bytes. After opening your wallet via one of the manual methods you can use Krux to create QR codes of all above types, transcript them to paper or metal using the transcription helpers or attach a thermal printer to your Krux and print out the mnemonic. Check out the Printing section for more information. You can also use an offline QR code generator for this (ideally on an airgapped device). Tiny Seed \u00b6 Tiny Seed is a compact metal plate mnemonic backup method. Krux devices have machine vision capabilities that allow users to scan these metal plates and instantly load mnemonics engraved on them. To properly scan them place the Tiny Seed over a black background and paint the punched bits black to increase contrast. Via Manual Input \u00b6 Manualy type words, word-numbers, toggle bits(or punches) as it is done in a Tiny Seed or Stackbit metal plate backup. Words \u00b6 Enter each word of your BIP-39 mnemonic one at a time. Krux will disable impossible-to-reach letters as you type and will attempt to autocomplete your words to speed up the process. On your 12th or 24th word, you can leave the word blank to have Krux generate the final word of your mnemonic for you. This is handy if you chose a manual method to generate your mnemonic and want the final word to be a valid checksum. Word Numbers \u00b6 Decimal \u00b6 Enter each word of your BIP-39 mnemonic as a number from 1 to 2048 one at a time. You can use this list for reference. Hexadecimal and Octal \u00b6 You can also enter your mnemonic as hexadecimal numbers, with values ranging from 0x1 to 0x800 or octal numbers, with values ranging from 01 to 04000. This is useful with some metal plate backups that store mnemonic word numbers using these formats. On your 12th or 24th word, you can leave the word blank to have Krux generate the final word of your mnemonic for you. This is handy if you chose a manual method to generate your mnemonic and want the final word to be a valid checksum. Tiny Seed (Bits) \u00b6 Enter each word of your BIP-39 mnemonic words in their binary form, toggling necessary bits to recreate each of the word's respective number. Last word will have checksum bits dynamically toggled while you fill previous bits. Stackbit 1248 (Bits) \u00b6 Enter mnemonic BIP-39 word's numbers using Stackbit 1248 metal plate backup method, where each of the four digits of the word's number is a sum of marked (punched) numbers 1,2,4 and 8. For example, to enter the word \"pear\", number 1297, you have to punch (1)(2)(1+8=9)(1+2+4=7) From Storage \u00b6 You can retrieve mnemonics previously stored on device's internal flash or external (SD card). All stored mnemonics are encrypted, to load them you'll have to enter the same key you used to encrypt them. Wallet loading sequence \u00b6 Confirm Mnemonic Words \u00b6 Once you have entered your mnemonic, you will be presented with the full list of words to confirm. Passphrase \u00b6 After confirming the mnemonic words, you can optionally choose to type or scan a BIP-39 passphrase. You can create a QR code from your passphrase offline in Tools section. Fingerprint \u00b6 The wallet's fingerprint, if you have it noted down, will help you make sure you entered the correct mnemonic and passphrase(optional) and will load the expected wallet. Single-sig or Multisig \u00b6 After loading your mnemonic and passphrase(optional), you will be asked if you want to use it as part of a Single-sig or Multisig wallet. Your choice here will subtly change the generated xpub that is used to set up your device in your wallet coordinator software. You can learn more about the difference in the following guides for using single-sig and multisig wallets. Now, onto the main menu...","title":"Loading a Mnemonic"},{"location":"getting-started/loading-a-mnemonic/#input-methods","text":"","title":"Input Methods"},{"location":"getting-started/loading-a-mnemonic/#via-camera","text":"You can choose to use the camera to scan QR codes or Tiny Seed metal plate backups","title":"Via Camera"},{"location":"getting-started/loading-a-mnemonic/#qr-code","text":"It's unpleasant having to manually enter 12 or 24 words each time you want to use Krux. To remedy this you can instead use the device's camera to read a QR code containing the words. Krux will decode QR codes of four types: - Plain text QR, with mnemonic encoded as text, with words separated by spaces. - SeedQR word's respective BIP-39 numbers concatenated, encoded as text. - Compact SeedQR: word's bits concatenated as bytes. - Encrypted Mnemonic: word's bits encrypted, encryption ID and configuration encoded as bytes. After opening your wallet via one of the manual methods you can use Krux to create QR codes of all above types, transcript them to paper or metal using the transcription helpers or attach a thermal printer to your Krux and print out the mnemonic. Check out the Printing section for more information. You can also use an offline QR code generator for this (ideally on an airgapped device).","title":"QR Code"},{"location":"getting-started/loading-a-mnemonic/#tiny-seed","text":"Tiny Seed is a compact metal plate mnemonic backup method. Krux devices have machine vision capabilities that allow users to scan these metal plates and instantly load mnemonics engraved on them. To properly scan them place the Tiny Seed over a black background and paint the punched bits black to increase contrast.","title":"Tiny Seed"},{"location":"getting-started/loading-a-mnemonic/#via-manual-input","text":"Manualy type words, word-numbers, toggle bits(or punches) as it is done in a Tiny Seed or Stackbit metal plate backup.","title":"Via Manual Input"},{"location":"getting-started/loading-a-mnemonic/#words","text":"Enter each word of your BIP-39 mnemonic one at a time. Krux will disable impossible-to-reach letters as you type and will attempt to autocomplete your words to speed up the process. On your 12th or 24th word, you can leave the word blank to have Krux generate the final word of your mnemonic for you. This is handy if you chose a manual method to generate your mnemonic and want the final word to be a valid checksum.","title":"Words"},{"location":"getting-started/loading-a-mnemonic/#word-numbers","text":"","title":"Word Numbers"},{"location":"getting-started/loading-a-mnemonic/#decimal","text":"Enter each word of your BIP-39 mnemonic as a number from 1 to 2048 one at a time. You can use this list for reference.","title":"Decimal"},{"location":"getting-started/loading-a-mnemonic/#hexadecimal-and-octal","text":"You can also enter your mnemonic as hexadecimal numbers, with values ranging from 0x1 to 0x800 or octal numbers, with values ranging from 01 to 04000. This is useful with some metal plate backups that store mnemonic word numbers using these formats. On your 12th or 24th word, you can leave the word blank to have Krux generate the final word of your mnemonic for you. This is handy if you chose a manual method to generate your mnemonic and want the final word to be a valid checksum.","title":"Hexadecimal and Octal"},{"location":"getting-started/loading-a-mnemonic/#tiny-seed-bits","text":"Enter each word of your BIP-39 mnemonic words in their binary form, toggling necessary bits to recreate each of the word's respective number. Last word will have checksum bits dynamically toggled while you fill previous bits.","title":"Tiny Seed (Bits)"},{"location":"getting-started/loading-a-mnemonic/#stackbit-1248-bits","text":"Enter mnemonic BIP-39 word's numbers using Stackbit 1248 metal plate backup method, where each of the four digits of the word's number is a sum of marked (punched) numbers 1,2,4 and 8. For example, to enter the word \"pear\", number 1297, you have to punch (1)(2)(1+8=9)(1+2+4=7)","title":"Stackbit 1248 (Bits)"},{"location":"getting-started/loading-a-mnemonic/#from-storage","text":"You can retrieve mnemonics previously stored on device's internal flash or external (SD card). All stored mnemonics are encrypted, to load them you'll have to enter the same key you used to encrypt them.","title":"From Storage"},{"location":"getting-started/loading-a-mnemonic/#wallet-loading-sequence","text":"","title":"Wallet loading sequence"},{"location":"getting-started/loading-a-mnemonic/#confirm-mnemonic-words","text":"Once you have entered your mnemonic, you will be presented with the full list of words to confirm.","title":"Confirm Mnemonic Words"},{"location":"getting-started/loading-a-mnemonic/#passphrase","text":"After confirming the mnemonic words, you can optionally choose to type or scan a BIP-39 passphrase. You can create a QR code from your passphrase offline in Tools section.","title":"Passphrase"},{"location":"getting-started/loading-a-mnemonic/#fingerprint","text":"The wallet's fingerprint, if you have it noted down, will help you make sure you entered the correct mnemonic and passphrase(optional) and will load the expected wallet.","title":"Fingerprint"},{"location":"getting-started/loading-a-mnemonic/#single-sig-or-multisig","text":"After loading your mnemonic and passphrase(optional), you will be asked if you want to use it as part of a Single-sig or Multisig wallet. Your choice here will subtly change the generated xpub that is used to set up your device in your wallet coordinator software. You can learn more about the difference in the following guides for using single-sig and multisig wallets. Now, onto the main menu...","title":"Single-sig or Multisig"},{"location":"getting-started/navigating-the-main-menu/","text":"After entering your mnemonic, you will find yourself on Krux's main menu. Below is a breakdown of the options: Mnemonic \u00b6 This will open a new submenu with several options to backup your mnemonic. Words \u00b6 Display the mnemonic words as text so you can write them down. Plaintext QR \u00b6 Generate a QR containing the mnemonic words as regular text, where words are separated by spaces. Compact SeedQR \u00b6 A QR code is created from a binary representation of mnemonic words. Format created by SeedSigner SeedQR \u00b6 Words are converted to their BIP39 numeric indexes, those numbers are then concatenated as a string and finally converted to a QR code. Format created by SeedSigner Stackbit 1248 \u00b6 Words are converted to their BIP39 numeric indexes, then each of the four digits is converted to a sum of 1,2,4 or 8. Tiny Seed \u00b6 This metal backup format represent BIP39 mnemonic word numbers index on its binary form on a metal plate, where 1's are marked(punched) and 0's are left intact Encrypt Mnemonic \u00b6 Here you can backup your mnemonic by storing them encrypted on a device's flash, on a SD card, or QR code format. The encryption method and parameters can be modified in settings. Use flash or SD card storage for convenience but never as your only backup method, there are many ways flash storage and the information it contains can degrade and be permanently damaged. On all below methods you'll be prompted to enter a encryption key, which can be in text or QR code format. You can also define a custom ID to help you manage your mnemonics. In case a custom key is not set, the current fingerprint will be used as ID. Store on Flash \u00b6 The encrypted mnemonic will be stored on device's flash memory, and will be available to be decrypted and loaded via \"Load Mnemonic\"->\"From Storage\". Store on SD Card \u00b6 The encrypted mnemonic will be stored on a SD card, if available, and will be available to be decrypted and loaded via \"Load Mnemonic\"->\"From Storage\". Encrypted QR Code \u00b6 The encrypted mnemonic will be converted to a QR code. When you scan this QR code via \"Load Mnemonic\"->\"Via Camera\"->\"QR Code\", you'll be prompted to enter decryption key to load the mnemonic. Extended Public Key \u00b6 This option displays your master extended public key (xpub) as text as well as a QR code. After the xpub, a zpub or Zpub is shown depending on if a single-sig or multisig wallet was chosen. This z/Zpub is usually not necessary unless you are using a wallet coordinator that either cannot parse or ignores key origin information in key expressions . If a thermal printer is attached, you can print both QR codes. Wallet Descriptor \u00b6 When you first select this option, you will be prompted to load a wallet. At this point, the camera will turn on and you will need to scan a wallet backup QR code from your wallet coordinator software. If scanned successfully, you will see a preview of the wallet to confirm. If you return to this option after having loaded your wallet, you will see the wallet's name and the (abbreviated) xpubs of all cosigners along with a QR code containing the same exact data that was loaded. If you have a thermal printer attached, you can print this QR code. Note that you currently can't change the wallet once one has been loaded. To do this, you will need to restart the device and re-enter your mnemonic. Address \u00b6 Scan Address \u00b6 This option turns on the camera and allows you to scan in a QR code of a receive address. Upon scanning, it will render its own QR code of the address back to the display along with the (text) address below it. You could use this feature to scan the address of someone you want to send coins to and display the QR back to your wallet coordinator rather than copy-pasting an address. If you have a thermal printer attached, you can also print this QR code. After proceeding through this screen, you will be asked if you want to check that the address belongs to your wallet. If you confirm, it will exhaustively search through as many addresses derived from your wallet as you want in order to find a match. This option exists as an extra security check to verify that the address your wallet coordinator has generated is authentic and belongs to your wallet. Receive Addresses \u00b6 List your wallet's receive addresses Change Addresses \u00b6 List your wallet's change addresses Sign \u00b6 Under Sign , you can choose to sign a PSBT or a message (sha256 hash). PSBT \u00b6 This option turns on the camera and allows you to scan an animated QR code of a PSBT generated by your wallet coordinator software. Upon scanning, you will be shown a preview of how much BTC is being sent, who is receiving it, and the fee that is being paid. Amounts are displayed in Satcomma standard format . If you confirm, a signed PSBT will be generated and an animated QR code will be displayed that you can use to import the signed PSBT back into your wallet coordinator software. If a thermal printer is attached, you can also print the QR codes. Message \u00b6 This option turns on the camera and allows you to scan a QR code of a message or the sha256 hash of one. Upon scanning, you will be shown a preview of the message's sha256 hash to confirm before signing. If you confirm, a signature will be generated and you will see a base64-encoded version of it followed by a QR code of it. If a thermal printer is attached, you can also print the QR code. Proceeding that, you will see your raw (master) public key in hexadecimal form, followed by a QR code of it, that can be used by others to verify your signature. If a thermal printer is attached, you can also print the QR code.","title":"Navigating the Main Menu"},{"location":"getting-started/navigating-the-main-menu/#mnemonic","text":"This will open a new submenu with several options to backup your mnemonic.","title":"Mnemonic"},{"location":"getting-started/navigating-the-main-menu/#words","text":"Display the mnemonic words as text so you can write them down.","title":"Words"},{"location":"getting-started/navigating-the-main-menu/#plaintext-qr","text":"Generate a QR containing the mnemonic words as regular text, where words are separated by spaces.","title":"Plaintext QR"},{"location":"getting-started/navigating-the-main-menu/#compact-seedqr","text":"A QR code is created from a binary representation of mnemonic words. Format created by SeedSigner","title":"Compact SeedQR"},{"location":"getting-started/navigating-the-main-menu/#seedqr","text":"Words are converted to their BIP39 numeric indexes, those numbers are then concatenated as a string and finally converted to a QR code. Format created by SeedSigner","title":"SeedQR"},{"location":"getting-started/navigating-the-main-menu/#stackbit-1248","text":"Words are converted to their BIP39 numeric indexes, then each of the four digits is converted to a sum of 1,2,4 or 8.","title":"Stackbit 1248"},{"location":"getting-started/navigating-the-main-menu/#tiny-seed","text":"This metal backup format represent BIP39 mnemonic word numbers index on its binary form on a metal plate, where 1's are marked(punched) and 0's are left intact","title":"Tiny Seed"},{"location":"getting-started/navigating-the-main-menu/#encrypt-mnemonic","text":"Here you can backup your mnemonic by storing them encrypted on a device's flash, on a SD card, or QR code format. The encryption method and parameters can be modified in settings. Use flash or SD card storage for convenience but never as your only backup method, there are many ways flash storage and the information it contains can degrade and be permanently damaged. On all below methods you'll be prompted to enter a encryption key, which can be in text or QR code format. You can also define a custom ID to help you manage your mnemonics. In case a custom key is not set, the current fingerprint will be used as ID.","title":"Encrypt Mnemonic"},{"location":"getting-started/navigating-the-main-menu/#store-on-flash","text":"The encrypted mnemonic will be stored on device's flash memory, and will be available to be decrypted and loaded via \"Load Mnemonic\"->\"From Storage\".","title":"Store on Flash"},{"location":"getting-started/navigating-the-main-menu/#store-on-sd-card","text":"The encrypted mnemonic will be stored on a SD card, if available, and will be available to be decrypted and loaded via \"Load Mnemonic\"->\"From Storage\".","title":"Store on SD Card"},{"location":"getting-started/navigating-the-main-menu/#encrypted-qr-code","text":"The encrypted mnemonic will be converted to a QR code. When you scan this QR code via \"Load Mnemonic\"->\"Via Camera\"->\"QR Code\", you'll be prompted to enter decryption key to load the mnemonic.","title":"Encrypted QR Code"},{"location":"getting-started/navigating-the-main-menu/#extended-public-key","text":"This option displays your master extended public key (xpub) as text as well as a QR code. After the xpub, a zpub or Zpub is shown depending on if a single-sig or multisig wallet was chosen. This z/Zpub is usually not necessary unless you are using a wallet coordinator that either cannot parse or ignores key origin information in key expressions . If a thermal printer is attached, you can print both QR codes.","title":"Extended Public Key"},{"location":"getting-started/navigating-the-main-menu/#wallet-descriptor","text":"When you first select this option, you will be prompted to load a wallet. At this point, the camera will turn on and you will need to scan a wallet backup QR code from your wallet coordinator software. If scanned successfully, you will see a preview of the wallet to confirm. If you return to this option after having loaded your wallet, you will see the wallet's name and the (abbreviated) xpubs of all cosigners along with a QR code containing the same exact data that was loaded. If you have a thermal printer attached, you can print this QR code. Note that you currently can't change the wallet once one has been loaded. To do this, you will need to restart the device and re-enter your mnemonic.","title":"Wallet Descriptor"},{"location":"getting-started/navigating-the-main-menu/#address","text":"","title":"Address"},{"location":"getting-started/navigating-the-main-menu/#scan-address","text":"This option turns on the camera and allows you to scan in a QR code of a receive address. Upon scanning, it will render its own QR code of the address back to the display along with the (text) address below it. You could use this feature to scan the address of someone you want to send coins to and display the QR back to your wallet coordinator rather than copy-pasting an address. If you have a thermal printer attached, you can also print this QR code. After proceeding through this screen, you will be asked if you want to check that the address belongs to your wallet. If you confirm, it will exhaustively search through as many addresses derived from your wallet as you want in order to find a match. This option exists as an extra security check to verify that the address your wallet coordinator has generated is authentic and belongs to your wallet.","title":"Scan Address"},{"location":"getting-started/navigating-the-main-menu/#receive-addresses","text":"List your wallet's receive addresses","title":"Receive Addresses"},{"location":"getting-started/navigating-the-main-menu/#change-addresses","text":"List your wallet's change addresses","title":"Change Addresses"},{"location":"getting-started/navigating-the-main-menu/#sign","text":"Under Sign , you can choose to sign a PSBT or a message (sha256 hash).","title":"Sign"},{"location":"getting-started/navigating-the-main-menu/#psbt","text":"This option turns on the camera and allows you to scan an animated QR code of a PSBT generated by your wallet coordinator software. Upon scanning, you will be shown a preview of how much BTC is being sent, who is receiving it, and the fee that is being paid. Amounts are displayed in Satcomma standard format . If you confirm, a signed PSBT will be generated and an animated QR code will be displayed that you can use to import the signed PSBT back into your wallet coordinator software. If a thermal printer is attached, you can also print the QR codes.","title":"PSBT"},{"location":"getting-started/navigating-the-main-menu/#message","text":"This option turns on the camera and allows you to scan a QR code of a message or the sha256 hash of one. Upon scanning, you will be shown a preview of the message's sha256 hash to confirm before signing. If you confirm, a signature will be generated and you will see a base64-encoded version of it followed by a QR code of it. If a thermal printer is attached, you can also print the QR code. Proceeding that, you will see your raw (master) public key in hexadecimal form, followed by a QR code of it, that can be used by others to verify your signature. If a thermal printer is attached, you can also print the QR code.","title":"Message"},{"location":"getting-started/printing/","text":"Krux has the ability to print all QR codes it generates, including mnemonic, xpub, wallet backup, and signed PSBT, via a locally-connected thermal printer over its serial port. Consult the part list page for supported printers. Once connected and powered on, all screens that display a QR code will begin showing a follow-up screen asking if you want to Print to QR? . There are many ways you can use this functionality, including: Printing backups of your mnemonics and multisig wallets Printing your xpubs and receive addresses to share Printing signed messages and PSBTs Since printed thermal paper fades quickly, you can also print your backups on sticker thermal paper to use as templates for punching into more resilient materials like steel. We also have plans to add support for other kinds of QR \"printers\" in the future, including CNC machines. In this case, gcode will be generated that can be sent directly to a GRBL controller to cut your QRs out of wood or metal! Just be careful what you do with the printed codes, since most smartphones can now quickly and easily read QR codes. Treat your QR mnemonic the same way you would treat a plaintext copy of it.","title":"Printing"},{"location":"getting-started/settings/","text":"On Krux's start menu, there is a Settings option. Below is a breakdown of the settings you can change: Bitcoin - Network \u00b6 This option allows you to switch between mainnet (the default) and testnet . This is mostly useful for development. Encryption \u00b6 Modify the encryption method and parameters to fit your needs. The encryption settings will be used both to store mnemonics and create encrypted QR codes. PBKDF2 Iter. (Iterations) \u00b6 When you enter a encryption key it is not directly used to encrypt your data. As a feature to increase safety, specially against brute force attacks, the key is derived multiple times using hashing functions. PBKDF2(Password-Based Key Derivation Function) iterations stands for the amount of derivations that will be performed over your key prior to encrypt/decrypt your mnemonic. If you increase this value it will make the encryption harder, at the cost of taking longer to encrypt and decrypt your mnemonics Encryption Mode \u00b6 Choose between well known and widely used AES(Advanced Encryption Standard) modes: AES-ECB \u00b6 ECB(Electronic Codebook), its a simpler method where encryption data blocks are encrypted individually. It will be faster and simpler to encrypt, QR codes will have a lower density and will be easier to transcribe. AES-CBC \u00b6 CBC(Cipher-block Chaining) is considered safer, because at the first data block an initial vector(IV) is used to add random data to the encryption. Subsequent blocks encryption depend on data from the previous blocks, giving its chaining feature. It will take longer to encrypt, because a snapshot will be required to generate a random initial vector. This initial vector will be stored together with encrypted data, making encrypted QR codes denser and harder to transcript. Language - Locale \u00b6 Here you can change the language that Krux uses. Logging \u00b6 Krux is capable of logging out information as it runs to a .krux.log file on the root of an inserted microSD card. By default, it logs nothing . Unless you are running into a bug and trying to get more information to diagnose the problem, it is strongly recommended to leave the Log Level here as NONE . If you experience an error and want to see more information about it, including a stack trace, you can change the Log Level to ERROR . If you're developing and want to see everything , you can change Log Level to either INFO or DEBUG . Note that DEBUG could inadvertently write your private keys to the log file if you have it enabled when entering your mnemonic, so set it with care. To help prevent an accident like this from happening, Krux will display a colored rectangle on the upper left corner of the screen, of which the color is relative to the logging level, being green the DEBUG color. Persist \u00b6 Choose between flash(device's internal memory) or SD card for the place where your settings will be stored. Printer \u00b6 You can set up a thermal printer or tell Krux to store a GRBL CNC instructions file on a SD card to machine QR codes CNC \u00b6 Define several machining parameters according to the desired size, material you'll use, and your CNC characteristics and capabilities. Thermal \u00b6 Printers can come with different baudrates from the manufacturer. By default, Krux assumes the connected printer will have a baudrate of 9600 . If yours is different, you can change this here. Also setup the IOs you'll use and tweak parameters according to your printer recommendations. Driver \u00b6 Here you choose between Thermal, CNC or none(default). Leave this setting to \"none\" if you won't use a printer and don't want to be bothered by print prompts. Theme \u00b6 Choose your color theme according to your preference. Some themes may be more suitable for some devices, coordinator cameras and environments. As an example, it may be easier to scan QR codes from Krux devices using light theme in brighter environments. Touchscreen \u00b6 If your device has touchscreen you can change the touch detection threshold. If it is being too sensitive or detecting false (ghost) touches, you should increase the threshold value, making it less sensitive. The other way is also valid, reduce the threshold to make the screen more sensitive to touches.","title":"Settings"},{"location":"getting-started/settings/#bitcoin-network","text":"This option allows you to switch between mainnet (the default) and testnet . This is mostly useful for development.","title":"Bitcoin - Network"},{"location":"getting-started/settings/#encryption","text":"Modify the encryption method and parameters to fit your needs. The encryption settings will be used both to store mnemonics and create encrypted QR codes.","title":"Encryption"},{"location":"getting-started/settings/#pbkdf2-iter-iterations","text":"When you enter a encryption key it is not directly used to encrypt your data. As a feature to increase safety, specially against brute force attacks, the key is derived multiple times using hashing functions. PBKDF2(Password-Based Key Derivation Function) iterations stands for the amount of derivations that will be performed over your key prior to encrypt/decrypt your mnemonic. If you increase this value it will make the encryption harder, at the cost of taking longer to encrypt and decrypt your mnemonics","title":"PBKDF2 Iter. (Iterations)"},{"location":"getting-started/settings/#encryption-mode","text":"Choose between well known and widely used AES(Advanced Encryption Standard) modes:","title":"Encryption Mode"},{"location":"getting-started/settings/#aes-ecb","text":"ECB(Electronic Codebook), its a simpler method where encryption data blocks are encrypted individually. It will be faster and simpler to encrypt, QR codes will have a lower density and will be easier to transcribe.","title":"AES-ECB"},{"location":"getting-started/settings/#aes-cbc","text":"CBC(Cipher-block Chaining) is considered safer, because at the first data block an initial vector(IV) is used to add random data to the encryption. Subsequent blocks encryption depend on data from the previous blocks, giving its chaining feature. It will take longer to encrypt, because a snapshot will be required to generate a random initial vector. This initial vector will be stored together with encrypted data, making encrypted QR codes denser and harder to transcript.","title":"AES-CBC"},{"location":"getting-started/settings/#language-locale","text":"Here you can change the language that Krux uses.","title":"Language - Locale"},{"location":"getting-started/settings/#logging","text":"Krux is capable of logging out information as it runs to a .krux.log file on the root of an inserted microSD card. By default, it logs nothing . Unless you are running into a bug and trying to get more information to diagnose the problem, it is strongly recommended to leave the Log Level here as NONE . If you experience an error and want to see more information about it, including a stack trace, you can change the Log Level to ERROR . If you're developing and want to see everything , you can change Log Level to either INFO or DEBUG . Note that DEBUG could inadvertently write your private keys to the log file if you have it enabled when entering your mnemonic, so set it with care. To help prevent an accident like this from happening, Krux will display a colored rectangle on the upper left corner of the screen, of which the color is relative to the logging level, being green the DEBUG color.","title":"Logging"},{"location":"getting-started/settings/#persist","text":"Choose between flash(device's internal memory) or SD card for the place where your settings will be stored.","title":"Persist"},{"location":"getting-started/settings/#printer","text":"You can set up a thermal printer or tell Krux to store a GRBL CNC instructions file on a SD card to machine QR codes","title":"Printer"},{"location":"getting-started/settings/#cnc","text":"Define several machining parameters according to the desired size, material you'll use, and your CNC characteristics and capabilities.","title":"CNC"},{"location":"getting-started/settings/#thermal","text":"Printers can come with different baudrates from the manufacturer. By default, Krux assumes the connected printer will have a baudrate of 9600 . If yours is different, you can change this here. Also setup the IOs you'll use and tweak parameters according to your printer recommendations.","title":"Thermal"},{"location":"getting-started/settings/#driver","text":"Here you choose between Thermal, CNC or none(default). Leave this setting to \"none\" if you won't use a printer and don't want to be bothered by print prompts.","title":"Driver"},{"location":"getting-started/settings/#theme","text":"Choose your color theme according to your preference. Some themes may be more suitable for some devices, coordinator cameras and environments. As an example, it may be easier to scan QR codes from Krux devices using light theme in brighter environments.","title":"Theme"},{"location":"getting-started/settings/#touchscreen","text":"If your device has touchscreen you can change the touch detection threshold. If it is being too sensitive or detecting false (ghost) touches, you should increase the threshold value, making it less sensitive. The other way is also valid, reduce the threshold to make the screen more sensitive to touches.","title":"Touchscreen"},{"location":"getting-started/tools/","text":"Here some handy tools are offered to complement your device's and wallets management. Check SD Card \u00b6 You can check if a SD card can be detected and read by your device and explore its content. Delete Mnemonic \u00b6 Delete any stored encrypted mnemonic, on device's internal memory or SD card. Print Test QR \u00b6 Quickly print a test QR code to check and optimize your printer setup. Create QR Code \u00b6 Enter a text input to create, print or transcript a QR code that can be later used as an encryption key or as a passphrase.","title":"Tools"},{"location":"getting-started/tools/#check-sd-card","text":"You can check if a SD card can be detected and read by your device and explore its content.","title":"Check SD Card"},{"location":"getting-started/tools/#delete-mnemonic","text":"Delete any stored encrypted mnemonic, on device's internal memory or SD card.","title":"Delete Mnemonic"},{"location":"getting-started/tools/#print-test-qr","text":"Quickly print a test QR code to check and optimize your printer setup.","title":"Print Test QR"},{"location":"getting-started/tools/#create-qr-code","text":"Enter a text input to create, print or transcript a QR code that can be later used as an encryption key or as a passphrase.","title":"Create QR Code"},{"location":"getting-started/using-a-multisig-wallet/","text":"This guide assumes you have already created a mnemonic for each cosigner that will be in your multisig wallet. If that is not the case, head over to the Generating a Mnemonic page and complete those steps first. When entering your mnemonics into Krux, make sure to select Multisig for all keys in your multisig. The choice of single-sig vs. multisig at this point will change the derivation path used to generate your master extended public key (xpub) which will affect how wallet software handles it. Selecting Multisig will derive an xpub using the derivation path m/48'/0'/0'/2' on mainnet and m/48'/1'/0'/2' on testnet, which indicates to wallet software that a Multisig Wallet script type should be used, specifically the Native Segwit script P2WSH , or just wsh . Create the wallet \u00b6 Specter Desktop Sparrow BlueWallet In Specter Desktop, you will need to import your public key by adding a new device. Press the Add new device button on the left side of the app. Krux is not listed as one of the available device types on the Add Device screen, so you will need to select the Other option. You will be taken to the Upload Keys screen where you can choose to Scan QR code . On your Krux, navigate to the Extended Public Key option under the main menu and show the first QR code to Specter Desktop. It should import the xpub and display the Purpose as #0 Multisig Sig (Segwit) . Give the device a name and press Continue . You should see the new device in the devices list on the left side of the app. Repeat this process for every key that will be in your multisig wallet. Once all key devices have been added, you can make a wallet using them. Press the Add new wallet button on the left side of the app. Choose to create a Multisignature wallet when it asks which type of wallet you want on the following screen. Select the devices you just added and press Continue . Give your wallet a name, make sure to select Segwit for the wallet type, and decide how many of your keys are required to sign a transaction, then press Create wallet . Congrats, you just created a multisig wallet! In Sparrow, create a new wallet by going to File > New Wallet and give it a name. On the wallet screen, make sure to select a Multi Signature policy type with the Native Segwit (P2WSH) script type. Here you can decide how many keys will be in your multisig and how many should be required to sign a transaction. Now, you will need to import your public key. To do so, press the Airgapped Hardware Wallet button under Keystores . On the screen that pops up, Krux is not listed as one of the available device types, so look for the Specter DIY option and click its Scan... button. On your Krux, navigate to the Extended Public Key option under the main menu and show the first QR code to Sparrow. It should import the xpub and show a key under Keystores like the following: Repeat this process for every key that will be in your multisig wallet. Once all keys have been added, click the blue Apply button to create your wallet. Congrats, you just created a multisig wallet! In BlueWallet, create a new wallet by either pressing the + button or scrolling to the right until you see the Add now button. On the screen that pops up, add a name for your wallet, tap on Vault , and tap Create to begin creating a multisig wallet. On the following screen, you can proceed with the defaults or adjust the number of cosigners (default is 2-of-3) as needed by going into the Vault Settings. Make sure to leave the script type as p2wsh . Continue and you will be taken to a screen where you can import your keys. Tap Import under the first Vault Key . Tap again on Scan or import a file to begin scanning a QR code. On your Krux, navigate to the Extended Public Key option under the main menu and show the first QR code to BlueWallet. You should see a green checkmark next to the key if successful. Repeat this process for every key that will be in your multisig wallet. Once all keys have been added, tap Create . From here, you can send or receive. Congrats, you just created a multisig wallet! Load the wallet into Krux \u00b6 Note: While not required, it is strongly recommended to load your multisig wallet into Krux before signing a PSBT as it will allow the device to verify that the transaction it is signing has the correct list of cosigners as defined in the wallet. It is also useful if you wish to print a backup of the wallet or visually inspect the list of cosigners being output by your wallet coordinator. Specter Desktop Sparrow BlueWallet Load the wallet into Krux by going to the Settings page in Specter Desktop, then click the Export tab. There, press the Export button to display a QR code of your wallet. In Krux, select the Wallet menu item option and scan the QR code. If it worked, Krux should display the wallet information that it loaded: Load the wallet into Krux by going back to the Settings page in Sparrow, then click the Export... button at the bottom of the screen and find Specter Desktop in the options list that pops up. Click its Show... button to display a QR code that you can import into Krux. In Krux, select the Wallet menu item option and scan the QR code. If it worked, Krux should display the wallet information that it loaded: Load the wallet into Krux by tapping the ellipsis in the top-right to see the wallet settings. From here, tap Export Coordination Setup in order to display a QR code of your wallet. In Krux, select the Wallet menu item option and scan the QR code. If it worked, Krux should display the wallet information that it loaded: Receive coins \u00b6 Specter Desktop Sparrow BlueWallet The Receive screen should show your first receive address that you can send funds to. Navigate to the Receive screen where you should see your first receive address that you can send funds to. Navigate to the Receive screen where you should see your first receive address that you can send funds to. Send coins \u00b6 Specter Desktop Sparrow BlueWallet Go to Send in Specter Desktop, fill in the recipient address, amount, and any extra information you wish to supply, and click Create unsigned transaction . You will now see a screen listing the devices in your wallet. Select the device you want to sign the transaction (PSBT) with. Specter Desktop will display an animated QR code of the PSBT that you can scan with Krux by going to Sign > PSBT in its main menu. After scanning, Krux should display info about the transaction for you to confirm before signing. Once you have confirmed, Krux will begin animating a QR code of the signed transaction that you can scan into Specter Desktop. In Specter Desktop, click Scan signed transaction and show it the QR. Each part of the QR code that is read will receive a ghost icon to indicate progress. Once all parts of the QR code have been read, you should see a checkmark next to your device indicating its signature was added. Repeat this process for the remaining keys in your wallet until you have a quorum of signatures. After the final signature, a window will popup asking you to broadcast the transaction. Click Send transaction and your transaction should be broadcasted to the network! \ud83c\udf89 Go to the Send screen, fill in the recipient address, amount, and any extra information you wish to supply, and click the blue Create Transaction button. On the next screen, make sure that the Signing Wallet is the one you created and that the Sighash is set to All . Click the blue Finalize Transaction for Signing button. On the next screen, click Show QR to make Sparrow display an animated QR code of the PSBT that you can scan with Krux by going to Sign > PSBT in its main menu. After scanning, Krux should display info about the transaction for you to confirm before signing. Once you have confirmed, Krux will begin animating a QR code of the signed transaction that you can scan into Sparrow. In Sparrow, click Scan QR and show it the QR. A progress bar will indicate how many parts of the QR have been read. Once all parts of the QR code have been read, you should see the signature bar partially fill indicating the signature was added. Repeat this process for the remaining keys in your wallet until you have a quorum of signatures. After the final signature, the bar will fill and two new buttons appear. Click the blue Broadcast Transaction button and your transaction should be broadcasted to the network! \ud83c\udf89 Go to the Send screen, fill in the recipient address, amount, and any extra information you wish to supply, and tap Next . You should see an animated QR code of the PSBT that you can scan with Krux by going to Sign > PSBT in its main menu. After scanning, Krux should display info about the transaction for you to confirm before signing. Once you have confirmed, Krux will begin animating a QR code of the signed transaction that you can scan into BlueWallet. Once all parts of the QR code have been read, you can then choose to broadcast the transaction, sending it to the network! \ud83c\udf89","title":"Using a Multisig Wallet"},{"location":"getting-started/using-a-multisig-wallet/#create-the-wallet","text":"Specter Desktop Sparrow BlueWallet In Specter Desktop, you will need to import your public key by adding a new device. Press the Add new device button on the left side of the app. Krux is not listed as one of the available device types on the Add Device screen, so you will need to select the Other option. You will be taken to the Upload Keys screen where you can choose to Scan QR code . On your Krux, navigate to the Extended Public Key option under the main menu and show the first QR code to Specter Desktop. It should import the xpub and display the Purpose as #0 Multisig Sig (Segwit) . Give the device a name and press Continue . You should see the new device in the devices list on the left side of the app. Repeat this process for every key that will be in your multisig wallet. Once all key devices have been added, you can make a wallet using them. Press the Add new wallet button on the left side of the app. Choose to create a Multisignature wallet when it asks which type of wallet you want on the following screen. Select the devices you just added and press Continue . Give your wallet a name, make sure to select Segwit for the wallet type, and decide how many of your keys are required to sign a transaction, then press Create wallet . Congrats, you just created a multisig wallet! In Sparrow, create a new wallet by going to File > New Wallet and give it a name. On the wallet screen, make sure to select a Multi Signature policy type with the Native Segwit (P2WSH) script type. Here you can decide how many keys will be in your multisig and how many should be required to sign a transaction. Now, you will need to import your public key. To do so, press the Airgapped Hardware Wallet button under Keystores . On the screen that pops up, Krux is not listed as one of the available device types, so look for the Specter DIY option and click its Scan... button. On your Krux, navigate to the Extended Public Key option under the main menu and show the first QR code to Sparrow. It should import the xpub and show a key under Keystores like the following: Repeat this process for every key that will be in your multisig wallet. Once all keys have been added, click the blue Apply button to create your wallet. Congrats, you just created a multisig wallet! In BlueWallet, create a new wallet by either pressing the + button or scrolling to the right until you see the Add now button. On the screen that pops up, add a name for your wallet, tap on Vault , and tap Create to begin creating a multisig wallet. On the following screen, you can proceed with the defaults or adjust the number of cosigners (default is 2-of-3) as needed by going into the Vault Settings. Make sure to leave the script type as p2wsh . Continue and you will be taken to a screen where you can import your keys. Tap Import under the first Vault Key . Tap again on Scan or import a file to begin scanning a QR code. On your Krux, navigate to the Extended Public Key option under the main menu and show the first QR code to BlueWallet. You should see a green checkmark next to the key if successful. Repeat this process for every key that will be in your multisig wallet. Once all keys have been added, tap Create . From here, you can send or receive. Congrats, you just created a multisig wallet!","title":"Create the wallet"},{"location":"getting-started/using-a-multisig-wallet/#load-the-wallet-into-krux","text":"Note: While not required, it is strongly recommended to load your multisig wallet into Krux before signing a PSBT as it will allow the device to verify that the transaction it is signing has the correct list of cosigners as defined in the wallet. It is also useful if you wish to print a backup of the wallet or visually inspect the list of cosigners being output by your wallet coordinator. Specter Desktop Sparrow BlueWallet Load the wallet into Krux by going to the Settings page in Specter Desktop, then click the Export tab. There, press the Export button to display a QR code of your wallet. In Krux, select the Wallet menu item option and scan the QR code. If it worked, Krux should display the wallet information that it loaded: Load the wallet into Krux by going back to the Settings page in Sparrow, then click the Export... button at the bottom of the screen and find Specter Desktop in the options list that pops up. Click its Show... button to display a QR code that you can import into Krux. In Krux, select the Wallet menu item option and scan the QR code. If it worked, Krux should display the wallet information that it loaded: Load the wallet into Krux by tapping the ellipsis in the top-right to see the wallet settings. From here, tap Export Coordination Setup in order to display a QR code of your wallet. In Krux, select the Wallet menu item option and scan the QR code. If it worked, Krux should display the wallet information that it loaded:","title":"Load the wallet into Krux"},{"location":"getting-started/using-a-multisig-wallet/#receive-coins","text":"Specter Desktop Sparrow BlueWallet The Receive screen should show your first receive address that you can send funds to. Navigate to the Receive screen where you should see your first receive address that you can send funds to. Navigate to the Receive screen where you should see your first receive address that you can send funds to.","title":"Receive coins"},{"location":"getting-started/using-a-multisig-wallet/#send-coins","text":"Specter Desktop Sparrow BlueWallet Go to Send in Specter Desktop, fill in the recipient address, amount, and any extra information you wish to supply, and click Create unsigned transaction . You will now see a screen listing the devices in your wallet. Select the device you want to sign the transaction (PSBT) with. Specter Desktop will display an animated QR code of the PSBT that you can scan with Krux by going to Sign > PSBT in its main menu. After scanning, Krux should display info about the transaction for you to confirm before signing. Once you have confirmed, Krux will begin animating a QR code of the signed transaction that you can scan into Specter Desktop. In Specter Desktop, click Scan signed transaction and show it the QR. Each part of the QR code that is read will receive a ghost icon to indicate progress. Once all parts of the QR code have been read, you should see a checkmark next to your device indicating its signature was added. Repeat this process for the remaining keys in your wallet until you have a quorum of signatures. After the final signature, a window will popup asking you to broadcast the transaction. Click Send transaction and your transaction should be broadcasted to the network! \ud83c\udf89 Go to the Send screen, fill in the recipient address, amount, and any extra information you wish to supply, and click the blue Create Transaction button. On the next screen, make sure that the Signing Wallet is the one you created and that the Sighash is set to All . Click the blue Finalize Transaction for Signing button. On the next screen, click Show QR to make Sparrow display an animated QR code of the PSBT that you can scan with Krux by going to Sign > PSBT in its main menu. After scanning, Krux should display info about the transaction for you to confirm before signing. Once you have confirmed, Krux will begin animating a QR code of the signed transaction that you can scan into Sparrow. In Sparrow, click Scan QR and show it the QR. A progress bar will indicate how many parts of the QR have been read. Once all parts of the QR code have been read, you should see the signature bar partially fill indicating the signature was added. Repeat this process for the remaining keys in your wallet until you have a quorum of signatures. After the final signature, the bar will fill and two new buttons appear. Click the blue Broadcast Transaction button and your transaction should be broadcasted to the network! \ud83c\udf89 Go to the Send screen, fill in the recipient address, amount, and any extra information you wish to supply, and tap Next . You should see an animated QR code of the PSBT that you can scan with Krux by going to Sign > PSBT in its main menu. After scanning, Krux should display info about the transaction for you to confirm before signing. Once you have confirmed, Krux will begin animating a QR code of the signed transaction that you can scan into BlueWallet. Once all parts of the QR code have been read, you can then choose to broadcast the transaction, sending it to the network! \ud83c\udf89","title":"Send coins"},{"location":"getting-started/using-a-single-sig-wallet/","text":"This guide assumes you have already created a mnemonic. If that is not the case, head over to the Generating a Mnemonic page and complete those steps first. When entering your mnemonic into Krux, make sure to select single-sig before proceeding. The choice of single-sig vs. multisig at this point will change the derivation path used to generate your master extended public key (xpub) which will affect how wallet software handles it. Selecting single-sig will derive an xpub using the derivation path m/84'/0'/0' on mainnet and m/84'/1'/0' on testnet, which indicates to wallet software that a Segregated Witness (Segwit) script type should be used. For single-sig wallets, this script is P2WPKH , or just wpkh . Create the wallet \u00b6 Specter Desktop Sparrow BlueWallet In Specter Desktop, you will need to import your public key by adding a new device. Press the Add new device button on the left side of the app. Krux is not listed as one of the available device types on the Add Device screen, so you will need to select the Other option. You will be taken to the Upload Keys screen where you can choose to Scan QR code . On your Krux, navigate to the Extended Public Key option under the main menu and show the first QR code to Specter Desktop. It should import the xpub and display the Purpose as #0 Single Sig (Segwit) . Give the device a name and press Continue . You should see the new device in the devices list on the left side of the app. After you've added a device with your key to Specter Desktop, you can make a wallet using it. Press the Add new wallet button on the left side of the app. Choose to create a Single key wallet when it asks which type of wallet you want on the following screen. Select the device you just added. Give your wallet a name and make sure to select Segwit for the wallet type, then press Create wallet . Congrats, you just created a single-sig wallet with your key! In Sparrow, create a new wallet by going to File > New Wallet and give it a name. On the wallet screen, make sure to select a Single Signature policy type with the Native Segwit (P2WPKH) script type. Now, you will need to import your public key. To do so, press the Airgapped Hardware Wallet button under Keystores . On the screen that pops up, Krux is not listed as one of the available device types, so look for the Specter DIY option and click its Scan... button. On your Krux, navigate to the Extended Public Key option under the main menu and show the first QR code to Sparrow. It should import the xpub and show a key under Keystores like the following: If everything looks right, click the blue Apply button to create your wallet. Congrats, you just created a single-sig wallet with your key! In BlueWallet, create a new wallet by either pressing the + button or scrolling to the right until you see the Add now button. On the screen that pops up, tap Import wallet to import your public key. On the following screen, tap Scan or import a file and it will begin trying to scan a QR code. On your Krux, navigate to the Extended Public Key option under the main menu and make sure to show the second, zpub QR code to BlueWallet. It should import the key and create a watch-only wallet. From here, you can send or receive. Congrats, you just created a single-sig wallet with your key! Load the wallet into Krux \u00b6 Note: This step is unnecessary for signing PSBTs with single-sig wallets since the script type ( wpkh ) and key are already known. However, this can be useful if you wish to print a backup of the wallet or want an additional sanity check. Specter Desktop Sparrow BlueWallet Load the wallet into Krux by going to the Settings page in Specter Desktop, then click the Export tab. There, press the Export button to display a QR code of your wallet. In Krux, select the Wallet menu item option and scan the QR code. If it worked, Krux should display the wallet information that it loaded: Load the wallet into Krux by going back to the Settings page in Sparrow, then click the Export... button at the bottom of the screen and find Specter Desktop in the options list that pops up. Click its Show... button to display a QR code that you can import into Krux. In Krux, select the Wallet menu item option and scan the QR code. If it worked, Krux should display the wallet information that it loaded: Load the wallet into Krux by tapping the ellipsis in the top-right to see the wallet settings. From here, tap Export/Backup in order to display a QR code of your wallet. In Krux, select the Wallet menu item option and scan the QR code. If it worked, Krux should display the wallet information that it loaded: Receive coins \u00b6 Specter Desktop Sparrow BlueWallet Navigate to the Receive screen where you should see a receive address that you can send funds to. Navigate to the Receive screen where you should see a receive address that you can send funds to. Navigate to the Receive screen where you should see a receive address that you can send funds to. Note that you can verify the receive address belongs to your wallet by using the Scan Address option. Send coins \u00b6 Specter Desktop Sparrow BlueWallet Go to Send in Specter Desktop, fill in the recipient address, amount, and any extra information you wish to supply, and click Create unsigned transaction . You will now see a screen listing the devices in your wallet. Select the device you want to sign the transaction (PSBT) with. Specter Desktop will display an animated QR code of the PSBT that you can scan with Krux by going to Sign > PSBT in its main menu. After scanning, Krux should display info about the transaction for you to confirm before signing. Once you have confirmed, Krux will begin animating a QR code of the signed transaction that you can scan into Specter Desktop. In Specter Desktop, click Scan signed transaction and show it the QR. Each part of the QR code that is read will receive a ghost icon to indicate progress. Once all parts of the QR code have been read, you should see a window popup asking you to broadcast the transaction. Click Send transaction and your transaction should be broadcasted to the network! \ud83c\udf89 Go to the Send screen, fill in the recipient address, amount, and any extra information you wish to supply, and click the blue Create Transaction button. On the next screen, make sure that the Signing Wallet is the one you created and that the Sighash is set to All . Click the blue Finalize Transaction for Signing button. On the next screen, click Show QR to make Sparrow display an animated QR code of the PSBT that you can scan with Krux by going to Sign > PSBT in its main menu. After scanning, Krux should display info about the transaction for you to confirm before signing. Once you have confirmed, Krux will begin animating a QR code of the signed transaction that you can scan into Sparrow. In Sparrow, click Scan QR and show it the QR. A progress bar will indicate how many parts of the QR have been read. Once all parts of the QR code have been read, you should see the signature bar fill and two new buttons appear. Click the blue Broadcast Transaction button and your transaction should be broadcasted to the network! \ud83c\udf89 Go to the Send screen, fill in the recipient address, amount, and any extra information you wish to supply, and tap Next . You should see an animated QR code of the PSBT that you can scan with Krux by going to Sign > PSBT in its main menu. After scanning, Krux should display info about the transaction for you to confirm before signing. Once you have confirmed, Krux will begin animating a QR code of the signed transaction that you can scan into BlueWallet. Once all parts of the QR code have been read, you can then choose to broadcast the transaction, sending it to the network! \ud83c\udf89","title":"Using a Single-sig Wallet"},{"location":"getting-started/using-a-single-sig-wallet/#create-the-wallet","text":"Specter Desktop Sparrow BlueWallet In Specter Desktop, you will need to import your public key by adding a new device. Press the Add new device button on the left side of the app. Krux is not listed as one of the available device types on the Add Device screen, so you will need to select the Other option. You will be taken to the Upload Keys screen where you can choose to Scan QR code . On your Krux, navigate to the Extended Public Key option under the main menu and show the first QR code to Specter Desktop. It should import the xpub and display the Purpose as #0 Single Sig (Segwit) . Give the device a name and press Continue . You should see the new device in the devices list on the left side of the app. After you've added a device with your key to Specter Desktop, you can make a wallet using it. Press the Add new wallet button on the left side of the app. Choose to create a Single key wallet when it asks which type of wallet you want on the following screen. Select the device you just added. Give your wallet a name and make sure to select Segwit for the wallet type, then press Create wallet . Congrats, you just created a single-sig wallet with your key! In Sparrow, create a new wallet by going to File > New Wallet and give it a name. On the wallet screen, make sure to select a Single Signature policy type with the Native Segwit (P2WPKH) script type. Now, you will need to import your public key. To do so, press the Airgapped Hardware Wallet button under Keystores . On the screen that pops up, Krux is not listed as one of the available device types, so look for the Specter DIY option and click its Scan... button. On your Krux, navigate to the Extended Public Key option under the main menu and show the first QR code to Sparrow. It should import the xpub and show a key under Keystores like the following: If everything looks right, click the blue Apply button to create your wallet. Congrats, you just created a single-sig wallet with your key! In BlueWallet, create a new wallet by either pressing the + button or scrolling to the right until you see the Add now button. On the screen that pops up, tap Import wallet to import your public key. On the following screen, tap Scan or import a file and it will begin trying to scan a QR code. On your Krux, navigate to the Extended Public Key option under the main menu and make sure to show the second, zpub QR code to BlueWallet. It should import the key and create a watch-only wallet. From here, you can send or receive. Congrats, you just created a single-sig wallet with your key!","title":"Create the wallet"},{"location":"getting-started/using-a-single-sig-wallet/#load-the-wallet-into-krux","text":"Note: This step is unnecessary for signing PSBTs with single-sig wallets since the script type ( wpkh ) and key are already known. However, this can be useful if you wish to print a backup of the wallet or want an additional sanity check. Specter Desktop Sparrow BlueWallet Load the wallet into Krux by going to the Settings page in Specter Desktop, then click the Export tab. There, press the Export button to display a QR code of your wallet. In Krux, select the Wallet menu item option and scan the QR code. If it worked, Krux should display the wallet information that it loaded: Load the wallet into Krux by going back to the Settings page in Sparrow, then click the Export... button at the bottom of the screen and find Specter Desktop in the options list that pops up. Click its Show... button to display a QR code that you can import into Krux. In Krux, select the Wallet menu item option and scan the QR code. If it worked, Krux should display the wallet information that it loaded: Load the wallet into Krux by tapping the ellipsis in the top-right to see the wallet settings. From here, tap Export/Backup in order to display a QR code of your wallet. In Krux, select the Wallet menu item option and scan the QR code. If it worked, Krux should display the wallet information that it loaded:","title":"Load the wallet into Krux"},{"location":"getting-started/using-a-single-sig-wallet/#receive-coins","text":"Specter Desktop Sparrow BlueWallet Navigate to the Receive screen where you should see a receive address that you can send funds to. Navigate to the Receive screen where you should see a receive address that you can send funds to. Navigate to the Receive screen where you should see a receive address that you can send funds to. Note that you can verify the receive address belongs to your wallet by using the Scan Address option.","title":"Receive coins"},{"location":"getting-started/using-a-single-sig-wallet/#send-coins","text":"Specter Desktop Sparrow BlueWallet Go to Send in Specter Desktop, fill in the recipient address, amount, and any extra information you wish to supply, and click Create unsigned transaction . You will now see a screen listing the devices in your wallet. Select the device you want to sign the transaction (PSBT) with. Specter Desktop will display an animated QR code of the PSBT that you can scan with Krux by going to Sign > PSBT in its main menu. After scanning, Krux should display info about the transaction for you to confirm before signing. Once you have confirmed, Krux will begin animating a QR code of the signed transaction that you can scan into Specter Desktop. In Specter Desktop, click Scan signed transaction and show it the QR. Each part of the QR code that is read will receive a ghost icon to indicate progress. Once all parts of the QR code have been read, you should see a window popup asking you to broadcast the transaction. Click Send transaction and your transaction should be broadcasted to the network! \ud83c\udf89 Go to the Send screen, fill in the recipient address, amount, and any extra information you wish to supply, and click the blue Create Transaction button. On the next screen, make sure that the Signing Wallet is the one you created and that the Sighash is set to All . Click the blue Finalize Transaction for Signing button. On the next screen, click Show QR to make Sparrow display an animated QR code of the PSBT that you can scan with Krux by going to Sign > PSBT in its main menu. After scanning, Krux should display info about the transaction for you to confirm before signing. Once you have confirmed, Krux will begin animating a QR code of the signed transaction that you can scan into Sparrow. In Sparrow, click Scan QR and show it the QR. A progress bar will indicate how many parts of the QR have been read. Once all parts of the QR code have been read, you should see the signature bar fill and two new buttons appear. Click the blue Broadcast Transaction button and your transaction should be broadcasted to the network! \ud83c\udf89 Go to the Send screen, fill in the recipient address, amount, and any extra information you wish to supply, and tap Next . You should see an animated QR code of the PSBT that you can scan with Krux by going to Sign > PSBT in its main menu. After scanning, Krux should display info about the transaction for you to confirm before signing. Once you have confirmed, Krux will begin animating a QR code of the signed transaction that you can scan into BlueWallet. Once all parts of the QR code have been read, you can then choose to broadcast the transaction, sending it to the network! \ud83c\udf89","title":"Send coins"},{"location":"getting-started/installing/from-gui/","text":"This page explains how to install Krux with KruxInstaller (GUI). Installing from a GUI \u00b6 You can install krux onto your K210-based device using our official desktop application, which we named KruxInstaller , available for Linux and Windows. Under the hood the GUI uses the same methods described in Installing from pre-build release , i.e. download, verify and flash the latest official release, but user won't need to type any command. Additionally you can install, through this application, experimental compiled Krux binaries . Keep in mind that this is software under development in the alpha stage and may be buggy. If you find any bugs or want to contribute to the project, please go to issues or fork it . Requirements \u00b6 Hardware \u00b6 You will need a K210-based device such as the M5StickV, Maix Amigo, Maix Dock, or Maix Bit and a USB-C cable to continue. Consult the part list for more information. Download the latest release \u00b6 The primary way to download the binary is via releases page on Github, search for Assets and click the dropdown arrow: Archlinux users \u00b6 There is a package named krux-installer-bin for Archlinux in the AUR . To install krux-installer-bin , You need to have the yay package manager installed. Then run on your terminal: yay -Sy krux-installer-bin Verify the files \u00b6 Before installing the release, it's a good idea to check if the hash sum matches the one defined in the file *.sha256.txt : On Linux \u00b6 sha256sum --check KruxInstaller-0.0.1-alpha-4.AppImage.sha256.txt KruxInstaller-0.0.1-alpha-4.AppImage On Windows with powershell \u00b6 ( Get-FileHash '.\\KruxInstaller.Setup.0.0.1-alpha-4.exe' ). Hash -eq ( Get-Content '.\\KruxInstaller.Setup.0.0.1-alpha-4.exe.sha256.txt' ) Modify permissions \u00b6 If you use Linux, you will need to add permission to allow execution of the .AppImage file: chown +x ./KruxInstaller-0.0.1-alpha-4.AppImage If you use Windows, the first time you run the .exe file the system will ask you if you trust the application. Openssl \u00b6 When downloading official krux firmware versions, it is necessary to verify the signature through the OpenSSL tool, as a way to verify the authenticity of the downloaded binaries. On linux release, verification is easily done since such tool exists natively in operating system. In windows release we are faced with the peculiarity of the operating system in question not having such a tool (see this comment *). So, we packaged a stable version of OpenSSL, compiled from the source. The compilation process is done entirely in a virtual environment on github and it is expected to be fully verifiable and free of malicious code. You can check the build steps in github actions . *fun fact: with this comment we can learn a bit about a part of krux development in its early stages. Usage \u00b6 When running Krux Installer, you will be presented with a menu of three items: Select device; Select version; Flash; Select device \u00b6 As the name says, here we select which device we want to flash; we recommend starting with this item. The window features three things: a dropdown arrow, a select button, and a back button. Clicking on the dropdown arrow brings up a list of officially supported K210 devices. By clicking on one of them we will be selecting a different firmware flavor that we will still choose. Then we can click on the select button. Select version \u00b6 Now we will select which firmware we want to flash, i.e. the latest official release or the test binaries . The difference between the two releases is that, while in the first one we can verify its integrity and authenticity , in the second one we will have no means of verifying it. However, the test binaries will contain the newest features that are being developed and discussed by the kruxer community. Official release \u00b6 The software will display the latest officially released version in the form selfcustody/tags/vXX.YY.Z , where XX means the year of release, YY the month of release and Z a subversion of this release. Once selected, the application will check if the entry exists in the system. If not, it will download the following files: krux-vXX.YY.Z.zip , krux-vXX.YY.Z.zip.sha256.txt , krux-vXX.YY.Z.zip .sig and selfcustody.pem . krux-vXX.YY.Z.zip : contains all the necessary binaries and signature files to install the firmware on each of the supported K210 devices; krux-vXX.YY.Z.zip.sha256.txt : contains a hash to verify the integrity of the downloaded zip file; krux.vXX.YY.Z.zip.sig : is the public digital signature for authenticity verification of the downloaded zip file; selfcustody.pem : is the public digital certificate that attests to the veracity of the public digital signature. If they are already present on your computer, the application will give you the option to download them again or continue with the files already downloaded. Test binaries \u00b6 As the name suggests, these binaries are intended for test purposes, contain experimental features, and are more likely to contain bugs. Use with caution. KruxInstaller will present the latest tested version released in the form odudex/krux_binaries , so you will always be given the option to download the latest commit from its repository. <device>/firmware.bin : is the unsigned firmware's binary of the choosen device; <device>/kboot.kfpkg : is the unsigned and compressed bootloader of the choosen device; <device>/ktool-<os> : is the k210 tool \"flasher\" specific to Operational system: ktool-linux : for linux machines; ktool-win.exe : for windows machines; If they are already present on your computer, the application will give you the option to download them again or continue with the files already downloaded. Flash \u00b6 Once we choose the device and firmware, we can flash. Before start the flash process itself, you be warned that you must plug and power on your device (for m5stickV and amigo devices); if you are using dock or bit devices, maybe the device itself will power on.","title":"From GUI application"},{"location":"getting-started/installing/from-gui/#installing-from-a-gui","text":"You can install krux onto your K210-based device using our official desktop application, which we named KruxInstaller , available for Linux and Windows. Under the hood the GUI uses the same methods described in Installing from pre-build release , i.e. download, verify and flash the latest official release, but user won't need to type any command. Additionally you can install, through this application, experimental compiled Krux binaries . Keep in mind that this is software under development in the alpha stage and may be buggy. If you find any bugs or want to contribute to the project, please go to issues or fork it .","title":"Installing from a GUI"},{"location":"getting-started/installing/from-gui/#requirements","text":"","title":"Requirements"},{"location":"getting-started/installing/from-gui/#hardware","text":"You will need a K210-based device such as the M5StickV, Maix Amigo, Maix Dock, or Maix Bit and a USB-C cable to continue. Consult the part list for more information.","title":"Hardware"},{"location":"getting-started/installing/from-gui/#download-the-latest-release","text":"The primary way to download the binary is via releases page on Github, search for Assets and click the dropdown arrow:","title":"Download the latest release"},{"location":"getting-started/installing/from-gui/#archlinux-users","text":"There is a package named krux-installer-bin for Archlinux in the AUR . To install krux-installer-bin , You need to have the yay package manager installed. Then run on your terminal: yay -Sy krux-installer-bin","title":"Archlinux users"},{"location":"getting-started/installing/from-gui/#verify-the-files","text":"Before installing the release, it's a good idea to check if the hash sum matches the one defined in the file *.sha256.txt :","title":"Verify the files"},{"location":"getting-started/installing/from-gui/#on-linux","text":"sha256sum --check KruxInstaller-0.0.1-alpha-4.AppImage.sha256.txt KruxInstaller-0.0.1-alpha-4.AppImage","title":"On Linux"},{"location":"getting-started/installing/from-gui/#on-windows-with-powershell","text":"( Get-FileHash '.\\KruxInstaller.Setup.0.0.1-alpha-4.exe' ). Hash -eq ( Get-Content '.\\KruxInstaller.Setup.0.0.1-alpha-4.exe.sha256.txt' )","title":"On Windows with powershell"},{"location":"getting-started/installing/from-gui/#modify-permissions","text":"If you use Linux, you will need to add permission to allow execution of the .AppImage file: chown +x ./KruxInstaller-0.0.1-alpha-4.AppImage If you use Windows, the first time you run the .exe file the system will ask you if you trust the application.","title":"Modify permissions"},{"location":"getting-started/installing/from-gui/#openssl","text":"When downloading official krux firmware versions, it is necessary to verify the signature through the OpenSSL tool, as a way to verify the authenticity of the downloaded binaries. On linux release, verification is easily done since such tool exists natively in operating system. In windows release we are faced with the peculiarity of the operating system in question not having such a tool (see this comment *). So, we packaged a stable version of OpenSSL, compiled from the source. The compilation process is done entirely in a virtual environment on github and it is expected to be fully verifiable and free of malicious code. You can check the build steps in github actions . *fun fact: with this comment we can learn a bit about a part of krux development in its early stages.","title":"Openssl"},{"location":"getting-started/installing/from-gui/#usage","text":"When running Krux Installer, you will be presented with a menu of three items: Select device; Select version; Flash;","title":"Usage"},{"location":"getting-started/installing/from-gui/#select-device","text":"As the name says, here we select which device we want to flash; we recommend starting with this item. The window features three things: a dropdown arrow, a select button, and a back button. Clicking on the dropdown arrow brings up a list of officially supported K210 devices. By clicking on one of them we will be selecting a different firmware flavor that we will still choose. Then we can click on the select button.","title":"Select device"},{"location":"getting-started/installing/from-gui/#select-version","text":"Now we will select which firmware we want to flash, i.e. the latest official release or the test binaries . The difference between the two releases is that, while in the first one we can verify its integrity and authenticity , in the second one we will have no means of verifying it. However, the test binaries will contain the newest features that are being developed and discussed by the kruxer community.","title":"Select version"},{"location":"getting-started/installing/from-gui/#official-release","text":"The software will display the latest officially released version in the form selfcustody/tags/vXX.YY.Z , where XX means the year of release, YY the month of release and Z a subversion of this release. Once selected, the application will check if the entry exists in the system. If not, it will download the following files: krux-vXX.YY.Z.zip , krux-vXX.YY.Z.zip.sha256.txt , krux-vXX.YY.Z.zip .sig and selfcustody.pem . krux-vXX.YY.Z.zip : contains all the necessary binaries and signature files to install the firmware on each of the supported K210 devices; krux-vXX.YY.Z.zip.sha256.txt : contains a hash to verify the integrity of the downloaded zip file; krux.vXX.YY.Z.zip.sig : is the public digital signature for authenticity verification of the downloaded zip file; selfcustody.pem : is the public digital certificate that attests to the veracity of the public digital signature. If they are already present on your computer, the application will give you the option to download them again or continue with the files already downloaded.","title":"Official release"},{"location":"getting-started/installing/from-gui/#test-binaries","text":"As the name suggests, these binaries are intended for test purposes, contain experimental features, and are more likely to contain bugs. Use with caution. KruxInstaller will present the latest tested version released in the form odudex/krux_binaries , so you will always be given the option to download the latest commit from its repository. <device>/firmware.bin : is the unsigned firmware's binary of the choosen device; <device>/kboot.kfpkg : is the unsigned and compressed bootloader of the choosen device; <device>/ktool-<os> : is the k210 tool \"flasher\" specific to Operational system: ktool-linux : for linux machines; ktool-win.exe : for windows machines; If they are already present on your computer, the application will give you the option to download them again or continue with the files already downloaded.","title":"Test binaries"},{"location":"getting-started/installing/from-gui/#flash","text":"Once we choose the device and firmware, we can flash. Before start the flash process itself, you be warned that you must plug and power on your device (for m5stickV and amigo devices); if you are using dock or bit devices, maybe the device itself will power on.","title":"Flash"},{"location":"getting-started/installing/from-pre-built-release/","text":"This page explains how to install Krux from an official, pre-built release. Download the latest release \u00b6 Head over to the releases page and download the latest signed release. Verify the files \u00b6 Before installing the release, it's a good idea to check that: The SHA256 hash of krux-vX.Y.Z.zip matches the hash in krux-vX.Y.Z.zip.sha256.txt The signature file krux-vX.Y.Z.zip.sig can be verified with the selfcustody.pem public key found in the root of the krux repository. You can either do this manually or with the krux shell script, which contains helper commands for this: ./krux sha256 krux-vX.Y.Z.zip ./krux verify krux-vX.Y.Z.zip selfcustody.pem Fun fact: Each Krux release is signed with Krux! Flash the firmware onto the device \u00b6 Extract the latest version of Krux you downloaded and enter the folder: unzip krux-vX.Y.Z.zip && cd krux-vX.Y.Z Connect the device to your computer via USB (for Amigo, make sure you\u2019re using bottom port), power it on, and run the following, replacing DEVICE with either m5stickv , amigo_tft , amigo_ips , or bit : ./ktool -B goE -b 1500000 maixpy_DEVICE/kboot.kfpkg For dock the -b parameter changes, so run: ./ktool -B dan -b 1500000 maixpy_dock/kboot.kfpkg When the flashing process completes, you should see the Krux logo: If after 30 seconds you still see a black screen, try power cycling the device by holding down the power button for six seconds. Congrats, you're now running Krux! Troubleshooting \u00b6 If ktool fails to run, you may need to give it executable permissions with chmod +x ./ktool , or you might need to use \"sudo\" if your user don't have access to serial port. In Windows or Mac you may need to explicitly allow the tool to run by adding an exception for it. If the flashing process fails midway through, check the connection, restart the device, and try the command again. Two serial ports are created when Amigo and Bit are connected to a PC. Sometimes Ktool will pick the wrong and flash will fail. Manually specify the serial port to overcome this issue using -p argument. Ex: ./ktool-linux -B goE -b 1500000 maixpy_amigo_tft/kboot.kfpkg -p /dev/ttyUSB1 Check por names of devices manager on Windows (ex: COM1, COM9), or list the ports on linux ls /dev/ttyUSB* List ports on Mac ls /dev/cu.usbserial* Different OS versions may have different port names, and the absence of ports may indicate a connection, driver or hardware related issue. A note about the Amigo \u00b6 Some Amigo screens have inverted x coordinates while others don\u2019t. If after flashing maixpy_amigo_tft to your device you notice that the buttons on keypad input screens appear to be in the wrong order, please try flashing maixpy_amigo_ips instead (or vice versa) which should correct the issue. Multilingual support \u00b6 Prefer a different language? Krux has support for multiple languages. Once at the start screen, go to Settings , followed by Locale , and select the locale you wish to use. If you have a microSD card inserted into the device, your preference will be automatically saved to a settings.json file at the root of the card. Upgrade via microSD card \u00b6 Once you've installed the initial firmware on your device via USB, you can either continue updating the device by flashing or you can perform upgrades via microSD card to keep the device airgapped. To perform an upgrade, simply copy the firmware.bin and firmware.bin.sig files to the root of a FAT-32 formatted microSD card, insert the card into your device, and reboot the device. If it detects the new firmware file and is able to verify the signature, you will be prompted to install it. Once installation is complete, eject the microSD card and delete the firmware files before reinserting and rebooting.","title":"From pre-built official release"},{"location":"getting-started/installing/from-pre-built-release/#download-the-latest-release","text":"Head over to the releases page and download the latest signed release.","title":"Download the latest release"},{"location":"getting-started/installing/from-pre-built-release/#verify-the-files","text":"Before installing the release, it's a good idea to check that: The SHA256 hash of krux-vX.Y.Z.zip matches the hash in krux-vX.Y.Z.zip.sha256.txt The signature file krux-vX.Y.Z.zip.sig can be verified with the selfcustody.pem public key found in the root of the krux repository. You can either do this manually or with the krux shell script, which contains helper commands for this: ./krux sha256 krux-vX.Y.Z.zip ./krux verify krux-vX.Y.Z.zip selfcustody.pem Fun fact: Each Krux release is signed with Krux!","title":"Verify the files"},{"location":"getting-started/installing/from-pre-built-release/#flash-the-firmware-onto-the-device","text":"Extract the latest version of Krux you downloaded and enter the folder: unzip krux-vX.Y.Z.zip && cd krux-vX.Y.Z Connect the device to your computer via USB (for Amigo, make sure you\u2019re using bottom port), power it on, and run the following, replacing DEVICE with either m5stickv , amigo_tft , amigo_ips , or bit : ./ktool -B goE -b 1500000 maixpy_DEVICE/kboot.kfpkg For dock the -b parameter changes, so run: ./ktool -B dan -b 1500000 maixpy_dock/kboot.kfpkg When the flashing process completes, you should see the Krux logo: If after 30 seconds you still see a black screen, try power cycling the device by holding down the power button for six seconds. Congrats, you're now running Krux!","title":"Flash the firmware onto the device"},{"location":"getting-started/installing/from-pre-built-release/#troubleshooting","text":"If ktool fails to run, you may need to give it executable permissions with chmod +x ./ktool , or you might need to use \"sudo\" if your user don't have access to serial port. In Windows or Mac you may need to explicitly allow the tool to run by adding an exception for it. If the flashing process fails midway through, check the connection, restart the device, and try the command again. Two serial ports are created when Amigo and Bit are connected to a PC. Sometimes Ktool will pick the wrong and flash will fail. Manually specify the serial port to overcome this issue using -p argument. Ex: ./ktool-linux -B goE -b 1500000 maixpy_amigo_tft/kboot.kfpkg -p /dev/ttyUSB1 Check por names of devices manager on Windows (ex: COM1, COM9), or list the ports on linux ls /dev/ttyUSB* List ports on Mac ls /dev/cu.usbserial* Different OS versions may have different port names, and the absence of ports may indicate a connection, driver or hardware related issue.","title":"Troubleshooting"},{"location":"getting-started/installing/from-pre-built-release/#a-note-about-the-amigo","text":"Some Amigo screens have inverted x coordinates while others don\u2019t. If after flashing maixpy_amigo_tft to your device you notice that the buttons on keypad input screens appear to be in the wrong order, please try flashing maixpy_amigo_ips instead (or vice versa) which should correct the issue.","title":"A note about the Amigo"},{"location":"getting-started/installing/from-pre-built-release/#multilingual-support","text":"Prefer a different language? Krux has support for multiple languages. Once at the start screen, go to Settings , followed by Locale , and select the locale you wish to use. If you have a microSD card inserted into the device, your preference will be automatically saved to a settings.json file at the root of the card.","title":"Multilingual support"},{"location":"getting-started/installing/from-pre-built-release/#upgrade-via-microsd-card","text":"Once you've installed the initial firmware on your device via USB, you can either continue updating the device by flashing or you can perform upgrades via microSD card to keep the device airgapped. To perform an upgrade, simply copy the firmware.bin and firmware.bin.sig files to the root of a FAT-32 formatted microSD card, insert the card into your device, and reboot the device. If it detects the new firmware file and is able to verify the signature, you will be prompted to install it. Once installation is complete, eject the microSD card and delete the firmware files before reinserting and rebooting.","title":"Upgrade via microSD card"},{"location":"getting-started/installing/from-source/","text":"This page explains how to install Krux from source. Software \u00b6 You will need a computer with git and vagrant installed. Fetch the code \u00b6 In a terminal, run the following: git clone --recurse-submodules https://github.com/selfcustody/krux This will pull down the Krux source code as well as the code for all its dependencies and put them inside a new krux folder. Note: When you wish to pull down updates to this repo, you can run the following inside the krux folder: git pull origin main && git submodule update --init --recursive Spin up a virtual machine \u00b6 After you have installed Vagrant, run the following inside the krux folder to spin up a new VM: vagrant up Build the firmware \u00b6 Prerequisite for upgrading via microSD \u00b6 If you wish to perform airgapped upgrades via microSD card, you will need to have a private and public key pair to sign your builds and verify the signatures. You can use an existing Krux installation and mnemonic to sign your builds with, or you can generate a keypair and sign from the openssl CLI . Commands have been added to the krux shell script to make this easier. In either case, you will need to update the SIGNER_PUBKEY field in src/krux/metadata.py to store your public key so that Krux can verify future builds before installing. To generate a keypair, run: vagrant ssh -c 'cd /vagrant; ./krux generate-keypair' vagrant ssh -c 'cd /vagrant; ./krux pem-to-pubkey pubkey.pem' The first command will create privkey.pem and pubkey.pem files you can use with openssl, and the second command will output your public key in the form expected by Krux. Once you've updated the SIGNER_PUBKEY with this value, you can proceed with the regular build process. Build \u00b6 Run the following, replacing DEVICE with either m5stickv , amigo_tft , amigo_ips , dock , or bit : vagrant ssh -c 'cd /vagrant; ./krux build maixpy_DEVICE' This will take around an hour or so to complete the first time. Subsequent builds should take only a few minutes. If all goes well, you should see a new build folder containing firmware.bin and kboot.kfpkg files when the build completes. Flash the firmware onto the device \u00b6 Connect the device to your computer via USB (for Amigo, make sure you\u2019re using bottom port), power it on, and run the following, replacing DEVICE with either m5stickv , amigo_tft , amigo_ips , dock , or bit : vagrant ssh -c 'cd /vagrant; ./krux flash maixpy_DEVICE' If the flashing fails try one of the following common solutions: Running vagrant reload prior to flashing in order for the newly-inserted USB device to be detected and passed through to the VM on startup. If this command fails, even after reloading, with the error Failed to find device via USB. Is it connected and powered on? , make sure that your user has been added to the vboxusers group. On Mac or Linux, run the following command: sudo usermod -a -G vboxusers yourusername If the flashing process fails midway through, check the connection, restart the device, and try the command again. If it continues to fail midway through, you can try using an alternative method of flashing with kflash if you're using a Linux machine. To install klash: pip3 install kflash Then you can flash the device: kflash -p /dev/ttyUSB1 -b 1500000 -B goE build/firmware.bin If you get a Greeting fail, check serial port error, try replacing /dev/ttyUSB1 with /dev/ttyUSB0 in the kflash command above. When the flashing process completes, you should see the Krux logo: If after 30 seconds you still see a black screen, try power cycling the device by holding down the power button for six seconds. Congrats, you're now running Krux! A note about the Amigo \u00b6 Some Amigo screens have inverted x coordinates while others don\u2019t. If after flashing maixpy_amigo_tft to your device you notice that the buttons on keypad input screens appear to be in the wrong order, please try flashing maixpy_amigo_ips instead (or vice versa) which should correct the issue. Multilingual support \u00b6 Prefer a different language? Krux has support for multiple languages. Once at the start screen, go to Settings , followed by Locale , and select the locale you wish to use. If you have a microSD card inserted into the device, your preference will be automatically saved to a settings.json file at the root of the card. Upgrade via microSD card \u00b6 Once you've installed the initial firmware on your device via USB, you can either continue updating the device by flashing or you can perform upgrades via microSD card to keep the device airgapped. After you've built the firmware, you can sign it using one of the following methods. Method 1: Signing from Krux \u00b6 First, calculate the SHA256 hash of the new firmware by running: vagrant ssh -c 'cd /vagrant; ./krux sha256 build/firmware.bin' Copy this hex string and turn it into a QR code using whichever QR code generator you'd like. In Krux, enter the mnemonic of your private key that will be used for signing, and go to Sign > Message . Scan the QR code you generated, and you will be asked if you wish to sign the hash. Proceed, and you will be presented with a base64-encoded string containing the signature, as text and as a QR code. Take this string and create a signature file by running: vagrant ssh -c 'cd /vagrant; ./krux b64decode \"signature-in-base64\" > build/firmware.bin.sig' This will generate a firmware.bin.sig file containing a signature of the firmware's SHA256 hash. Method 2: Signing from your computer with OpenSSL \u00b6 With the keypair you generated before , you can now run: vagrant ssh -c 'cd /vagrant; ./krux sign build/firmware.bin privkey.pem' This will generate a firmware.bin.sig file containing a signature of the firmware's SHA256 hash. Upgrade via microSD card (continued) \u00b6 To perform an upgrade, simply copy the firmware.bin and firmware.bin.sig files to the root of a FAT-32 formatted microSD card, insert the card into your device, and reboot the device. If it detects the new firmware file and is able to verify the signature, you will be prompted to install it. Once installation is complete, eject the microSD card and delete the firmware files before reinserting and rebooting.","title":"From source"},{"location":"getting-started/installing/from-source/#software","text":"You will need a computer with git and vagrant installed.","title":"Software"},{"location":"getting-started/installing/from-source/#fetch-the-code","text":"In a terminal, run the following: git clone --recurse-submodules https://github.com/selfcustody/krux This will pull down the Krux source code as well as the code for all its dependencies and put them inside a new krux folder. Note: When you wish to pull down updates to this repo, you can run the following inside the krux folder: git pull origin main && git submodule update --init --recursive","title":"Fetch the code"},{"location":"getting-started/installing/from-source/#spin-up-a-virtual-machine","text":"After you have installed Vagrant, run the following inside the krux folder to spin up a new VM: vagrant up","title":"Spin up a virtual machine"},{"location":"getting-started/installing/from-source/#build-the-firmware","text":"","title":"Build the firmware"},{"location":"getting-started/installing/from-source/#prerequisite-for-upgrading-via-microsd","text":"If you wish to perform airgapped upgrades via microSD card, you will need to have a private and public key pair to sign your builds and verify the signatures. You can use an existing Krux installation and mnemonic to sign your builds with, or you can generate a keypair and sign from the openssl CLI . Commands have been added to the krux shell script to make this easier. In either case, you will need to update the SIGNER_PUBKEY field in src/krux/metadata.py to store your public key so that Krux can verify future builds before installing. To generate a keypair, run: vagrant ssh -c 'cd /vagrant; ./krux generate-keypair' vagrant ssh -c 'cd /vagrant; ./krux pem-to-pubkey pubkey.pem' The first command will create privkey.pem and pubkey.pem files you can use with openssl, and the second command will output your public key in the form expected by Krux. Once you've updated the SIGNER_PUBKEY with this value, you can proceed with the regular build process.","title":"Prerequisite for upgrading via microSD"},{"location":"getting-started/installing/from-source/#build","text":"Run the following, replacing DEVICE with either m5stickv , amigo_tft , amigo_ips , dock , or bit : vagrant ssh -c 'cd /vagrant; ./krux build maixpy_DEVICE' This will take around an hour or so to complete the first time. Subsequent builds should take only a few minutes. If all goes well, you should see a new build folder containing firmware.bin and kboot.kfpkg files when the build completes.","title":"Build"},{"location":"getting-started/installing/from-source/#flash-the-firmware-onto-the-device","text":"Connect the device to your computer via USB (for Amigo, make sure you\u2019re using bottom port), power it on, and run the following, replacing DEVICE with either m5stickv , amigo_tft , amigo_ips , dock , or bit : vagrant ssh -c 'cd /vagrant; ./krux flash maixpy_DEVICE' If the flashing fails try one of the following common solutions: Running vagrant reload prior to flashing in order for the newly-inserted USB device to be detected and passed through to the VM on startup. If this command fails, even after reloading, with the error Failed to find device via USB. Is it connected and powered on? , make sure that your user has been added to the vboxusers group. On Mac or Linux, run the following command: sudo usermod -a -G vboxusers yourusername If the flashing process fails midway through, check the connection, restart the device, and try the command again. If it continues to fail midway through, you can try using an alternative method of flashing with kflash if you're using a Linux machine. To install klash: pip3 install kflash Then you can flash the device: kflash -p /dev/ttyUSB1 -b 1500000 -B goE build/firmware.bin If you get a Greeting fail, check serial port error, try replacing /dev/ttyUSB1 with /dev/ttyUSB0 in the kflash command above. When the flashing process completes, you should see the Krux logo: If after 30 seconds you still see a black screen, try power cycling the device by holding down the power button for six seconds. Congrats, you're now running Krux!","title":"Flash the firmware onto the device"},{"location":"getting-started/installing/from-source/#a-note-about-the-amigo","text":"Some Amigo screens have inverted x coordinates while others don\u2019t. If after flashing maixpy_amigo_tft to your device you notice that the buttons on keypad input screens appear to be in the wrong order, please try flashing maixpy_amigo_ips instead (or vice versa) which should correct the issue.","title":"A note about the Amigo"},{"location":"getting-started/installing/from-source/#multilingual-support","text":"Prefer a different language? Krux has support for multiple languages. Once at the start screen, go to Settings , followed by Locale , and select the locale you wish to use. If you have a microSD card inserted into the device, your preference will be automatically saved to a settings.json file at the root of the card.","title":"Multilingual support"},{"location":"getting-started/installing/from-source/#upgrade-via-microsd-card","text":"Once you've installed the initial firmware on your device via USB, you can either continue updating the device by flashing or you can perform upgrades via microSD card to keep the device airgapped. After you've built the firmware, you can sign it using one of the following methods.","title":"Upgrade via microSD card"},{"location":"getting-started/installing/from-source/#method-1-signing-from-krux","text":"First, calculate the SHA256 hash of the new firmware by running: vagrant ssh -c 'cd /vagrant; ./krux sha256 build/firmware.bin' Copy this hex string and turn it into a QR code using whichever QR code generator you'd like. In Krux, enter the mnemonic of your private key that will be used for signing, and go to Sign > Message . Scan the QR code you generated, and you will be asked if you wish to sign the hash. Proceed, and you will be presented with a base64-encoded string containing the signature, as text and as a QR code. Take this string and create a signature file by running: vagrant ssh -c 'cd /vagrant; ./krux b64decode \"signature-in-base64\" > build/firmware.bin.sig' This will generate a firmware.bin.sig file containing a signature of the firmware's SHA256 hash.","title":"Method 1: Signing from Krux"},{"location":"getting-started/installing/from-source/#method-2-signing-from-your-computer-with-openssl","text":"With the keypair you generated before , you can now run: vagrant ssh -c 'cd /vagrant; ./krux sign build/firmware.bin privkey.pem' This will generate a firmware.bin.sig file containing a signature of the firmware's SHA256 hash.","title":"Method 2: Signing from your computer with OpenSSL"},{"location":"getting-started/installing/from-source/#upgrade-via-microsd-card-continued","text":"To perform an upgrade, simply copy the firmware.bin and firmware.bin.sig files to the root of a FAT-32 formatted microSD card, insert the card into your device, and reboot the device. If it detects the new firmware file and is able to verify the signature, you will be prompted to install it. Once installation is complete, eject the microSD card and delete the firmware files before reinserting and rebooting.","title":"Upgrade via microSD card (continued)"},{"location":"getting-started/installing/from-test-release/","text":"This page explains how to install Krux from a test, pre-built release. Warning \u00b6 Keep in mind that these are unsigned binaries Download \u00b6 Download experimental compiled firmware or Android app: Krux binaries Android \u00b6 Krux Android app is intended for learning about Krux and Bitcoin air-gapped transactions. Vulnerabilities inherent in Android phones such as the OS, other apps and wireless connectivity make using any phone insecure. Krux app should NOT be used to manage savings or important keys and mnemonics. For that, a dedicated device is recommended. M5StickV \u00b6 Linux \u00b6 To Flash M5stickV run: ./ktool-linux -B goE -b 1500000 maixpy_m5stickv/kboot.kfpkg Windows \u00b6 Replace './ktool-linux' for 'ktool-win.exe' and / for \\ in commands. Ex: ./ ktool-win . exe -B goE -b 1500000 maixpy_m5stickv \\ kboot . kfpkg Sipeed Amigo TFT \u00b6 Linux \u00b6 To Flash Maix Amigo run: ./ktool-linux -B goE -b 1500000 maixpy_amigo_tft/kboot.kfpkg Windows \u00b6 Replace './ktool-linux' for 'ktool-win.exe' and / for \\ in commands. Ex: ./ ktool-win . exe -B goE -b 1500000 maixpy_amigo_ips \\ kboot . kfpkg Sipeed Amigo IPS \u00b6 Linux \u00b6 If your Amigo got flipped character position on keypads and switched Yes/No questions try the IPS version: ./ktool-linux -B goE -b 1500000 maixpy_amigo_ips/kboot.kfpkg Windows \u00b6 Replace './ktool-linux' for 'ktool-win.exe' and / for \\ in commands. Ex: ./ ktool-win . exe -B goE -b 1500000 maixpy_amigo_tft \\ kboot . kfpkg Sipeed Bit \u00b6 Linux \u00b6 To Flash Maix Dock run: ./ktool-linux -B goE -b 1500000 maixpy_bit/kboot.kfpkg Windows \u00b6 Replace './ktool-linux' for 'ktool-win.exe' and / for \\ in commands. Ex: ./ ktool-win . exe -B goE -b 1500000 maixpy_bit \\ kboot . kfpkg Sipeed Dock \u00b6 Linux \u00b6 To Flash Maix Dock run: ./ktool-linux -B goE -b 1500000 maixpy_dock/kboot.kfpkg Windows \u00b6 Replace './ktool-linux' for 'ktool-win.exe' and / for \\ in commands. Ex: ./ ktool-win . exe -B goE -b 1500000 maixpy_dock \\ kboot . kfpkg Aimotion Yahboom \u00b6 Linux \u00b6 To Flash Yahboom Aimotion you'll have to manually specify the port, on this example /dev/ttyUSB0: ./ktool-linux -B goE -b 1500000 -p /dev/ttyUSB0 yahboom/kboot.kfpkg","title":"From pre-built test release"},{"location":"getting-started/installing/from-test-release/#warning","text":"Keep in mind that these are unsigned binaries","title":"Warning"},{"location":"getting-started/installing/from-test-release/#download","text":"Download experimental compiled firmware or Android app: Krux binaries","title":"Download"},{"location":"getting-started/installing/from-test-release/#android","text":"Krux Android app is intended for learning about Krux and Bitcoin air-gapped transactions. Vulnerabilities inherent in Android phones such as the OS, other apps and wireless connectivity make using any phone insecure. Krux app should NOT be used to manage savings or important keys and mnemonics. For that, a dedicated device is recommended.","title":"Android"},{"location":"getting-started/installing/from-test-release/#m5stickv","text":"","title":"M5StickV"},{"location":"getting-started/installing/from-test-release/#linux","text":"To Flash M5stickV run: ./ktool-linux -B goE -b 1500000 maixpy_m5stickv/kboot.kfpkg","title":"Linux"},{"location":"getting-started/installing/from-test-release/#windows","text":"Replace './ktool-linux' for 'ktool-win.exe' and / for \\ in commands. Ex: ./ ktool-win . exe -B goE -b 1500000 maixpy_m5stickv \\ kboot . kfpkg","title":"Windows"},{"location":"getting-started/installing/from-test-release/#sipeed-amigo-tft","text":"","title":"Sipeed Amigo TFT"},{"location":"getting-started/installing/from-test-release/#linux_1","text":"To Flash Maix Amigo run: ./ktool-linux -B goE -b 1500000 maixpy_amigo_tft/kboot.kfpkg","title":"Linux"},{"location":"getting-started/installing/from-test-release/#windows_1","text":"Replace './ktool-linux' for 'ktool-win.exe' and / for \\ in commands. Ex: ./ ktool-win . exe -B goE -b 1500000 maixpy_amigo_ips \\ kboot . kfpkg","title":"Windows"},{"location":"getting-started/installing/from-test-release/#sipeed-amigo-ips","text":"","title":"Sipeed Amigo IPS"},{"location":"getting-started/installing/from-test-release/#linux_2","text":"If your Amigo got flipped character position on keypads and switched Yes/No questions try the IPS version: ./ktool-linux -B goE -b 1500000 maixpy_amigo_ips/kboot.kfpkg","title":"Linux"},{"location":"getting-started/installing/from-test-release/#windows_2","text":"Replace './ktool-linux' for 'ktool-win.exe' and / for \\ in commands. Ex: ./ ktool-win . exe -B goE -b 1500000 maixpy_amigo_tft \\ kboot . kfpkg","title":"Windows"},{"location":"getting-started/installing/from-test-release/#sipeed-bit","text":"","title":"Sipeed Bit"},{"location":"getting-started/installing/from-test-release/#linux_3","text":"To Flash Maix Dock run: ./ktool-linux -B goE -b 1500000 maixpy_bit/kboot.kfpkg","title":"Linux"},{"location":"getting-started/installing/from-test-release/#windows_3","text":"Replace './ktool-linux' for 'ktool-win.exe' and / for \\ in commands. Ex: ./ ktool-win . exe -B goE -b 1500000 maixpy_bit \\ kboot . kfpkg","title":"Windows"},{"location":"getting-started/installing/from-test-release/#sipeed-dock","text":"","title":"Sipeed Dock"},{"location":"getting-started/installing/from-test-release/#linux_4","text":"To Flash Maix Dock run: ./ktool-linux -B goE -b 1500000 maixpy_dock/kboot.kfpkg","title":"Linux"},{"location":"getting-started/installing/from-test-release/#windows_4","text":"Replace './ktool-linux' for 'ktool-win.exe' and / for \\ in commands. Ex: ./ ktool-win . exe -B goE -b 1500000 maixpy_dock \\ kboot . kfpkg","title":"Windows"},{"location":"getting-started/installing/from-test-release/#aimotion-yahboom","text":"","title":"Aimotion Yahboom"},{"location":"getting-started/installing/from-test-release/#linux_5","text":"To Flash Yahboom Aimotion you'll have to manually specify the port, on this example /dev/ttyUSB0: ./ktool-linux -B goE -b 1500000 -p /dev/ttyUSB0 yahboom/kboot.kfpkg","title":"Linux"},{"location":"getting-started/installing/","text":"This page summarizes how to install Krux from four diffent ways. Fom pre-built official release From pre-built test release From GUI application From source Requirements \u00b6 In any form, there is a basic requirement for all of them: You will need a K210-based device such as the M5StickV, Maix Amigo, Maix Dock, or Maix Bit and a USB-C cable to continue. Consult the part list for more information. If you wish to perform airgapped firmware updates or want persistent settings, you will also need a supported microSD card .","title":"Summary"},{"location":"getting-started/installing/#requirements","text":"In any form, there is a basic requirement for all of them: You will need a K210-based device such as the M5StickV, Maix Amigo, Maix Dock, or Maix Bit and a USB-C cable to continue. Consult the part list for more information. If you wish to perform airgapped firmware updates or want persistent settings, you will also need a supported microSD card .","title":"Requirements"},{"location":"en/encrypted-qr-codes/","text":"Introduction \u00b6 There are many possible security layers one could add to protect a wallet\u2019s private key, adding a passphrase to the mnemonic is the most common. To encrypt a mnemonic would have similar use case as the passphrase, but, depending on how it is done, the user experience could be different. The main difference from passphrases to Krux\u2019s encrypted mnemonic implementation is that when users type the wrong key, instead of loading a different wallet, encrypted mnemonic QR codes will return an error. This is not considered an advantage, but a difference, that may be desired or not. The implementation also has the convenience of storing a mnemonic ID on the QR code. Mnemonic encryption, with its own key, can be used together with passphrases as an extra security layer. QR Data and Parsing \u00b6 In search of efficiency and smaller QR codes, all data is converted to bytes and organized like a Bitcoin transaction, with variable and fixed length fields. The following data is present on the QR code: ID length ID Version Key Derivations IV Encrypted Mnemonic Validation Block 1 Byte Variable 1 Byte 3 Bytes 16 Bytes (optional) 16 Bytes (12 words) 32 Bytes (24 words) 16 Bytes Public: \u00b6 (1) - Mnemonic ID length (1 Byte). (2) - Mnemonic ID(variable lenght): Custom ID or wallet fingerprint. (3) - Version(1 Byte): Version of encryption method, currently two are available: 0: AES-ECB-PBKDF2: Electronic Codebook with PBKDF2 key derivation. 1: AES-CBC-PBKDF2: Cypher Block Chaining with PBKDF2 key derivation. (4) - Key derivation iterations(3 Bytes): Number of PBKDF2 key derivations times 10,000. Cipher: \u00b6 (5) - IV(16 Bytes-optional): Initial vector for AES-CBC encryption, possibility to be nonce for future AES-CTR or other encryption methods. (6) - Encrypted Mnemonic(16 Bytes - 12 words, 32 Bytes - 24 words): Mnemonic ciphertext. (7) - Validation block(16 Bytes): Currently using first 16 bytes of sha256 of the mnemonic bytes as checksum, could be used in future to store AES-AEX validation tag.","title":"Encrypted QRCodes"},{"location":"en/encrypted-qr-codes/#introduction","text":"There are many possible security layers one could add to protect a wallet\u2019s private key, adding a passphrase to the mnemonic is the most common. To encrypt a mnemonic would have similar use case as the passphrase, but, depending on how it is done, the user experience could be different. The main difference from passphrases to Krux\u2019s encrypted mnemonic implementation is that when users type the wrong key, instead of loading a different wallet, encrypted mnemonic QR codes will return an error. This is not considered an advantage, but a difference, that may be desired or not. The implementation also has the convenience of storing a mnemonic ID on the QR code. Mnemonic encryption, with its own key, can be used together with passphrases as an extra security layer.","title":"Introduction"},{"location":"en/encrypted-qr-codes/#qr-data-and-parsing","text":"In search of efficiency and smaller QR codes, all data is converted to bytes and organized like a Bitcoin transaction, with variable and fixed length fields. The following data is present on the QR code: ID length ID Version Key Derivations IV Encrypted Mnemonic Validation Block 1 Byte Variable 1 Byte 3 Bytes 16 Bytes (optional) 16 Bytes (12 words) 32 Bytes (24 words) 16 Bytes","title":"QR Data and Parsing"},{"location":"en/encrypted-qr-codes/#public","text":"(1) - Mnemonic ID length (1 Byte). (2) - Mnemonic ID(variable lenght): Custom ID or wallet fingerprint. (3) - Version(1 Byte): Version of encryption method, currently two are available: 0: AES-ECB-PBKDF2: Electronic Codebook with PBKDF2 key derivation. 1: AES-CBC-PBKDF2: Cypher Block Chaining with PBKDF2 key derivation. (4) - Key derivation iterations(3 Bytes): Number of PBKDF2 key derivations times 10,000.","title":"Public:"},{"location":"en/encrypted-qr-codes/#cipher","text":"(5) - IV(16 Bytes-optional): Initial vector for AES-CBC encryption, possibility to be nonce for future AES-CTR or other encryption methods. (6) - Encrypted Mnemonic(16 Bytes - 12 words, 32 Bytes - 24 words): Mnemonic ciphertext. (7) - Validation block(16 Bytes): Currently using first 16 bytes of sha256 of the mnemonic bytes as checksum, could be used in future to store AES-AEX validation tag.","title":"Cipher:"}]}